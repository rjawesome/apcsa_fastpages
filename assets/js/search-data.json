{
  
    
        "post0": {
            "title": "2023 AP Test FRQs",
            "content": "FRQ 1 . This FRQ has you working the AppointmentBook class, which allows someone to book appointments in 8 periods, each of which has minutes 0-59 | Appointments can only take consecutive minutes and must be contained within the same period | Helper functions of isMinuteFree (to see whether a mintue is used) and reserveBlock (to actually reserve a time slot) | . FRQ 1a . You have to write a method findFreeBlock that takes in a period and length of time, and looks for the first consecutive block of time that is availiable | Examples given by CollegeBoard | My solution is below (with comments) public int findFreeBlock(int period, int duration) { // stores the start of the current block we are on int curStart = 0; // stores the length of the current block we are on int curLength = 0; // loop through all minutes in the period for (int i = 0; i&lt;=59; i++) { if (isMinuteFree(period, i)) { // increase the length of our block curLength++; } else { // clear the current block as minutes must be consecutive curLength = 0; curStart = i+1; } // check if our block has reached the required length if (curLength == duration) { return curStart; } } // no suitable block has been found return -1; } . | . FRQ 1b . You now have to write the method makeAppointment using findFreeBlock to make an appointment within a period range with a certain duration | For this, you would use the helper method reserveBlock | Examples given by CollegeBoard | My solution is below (with comments) public boolean makeAppointment(int startPeriod, int endPeriod, int duration) { // loop through all the possible periods we could make an appointment in for (int period = startPeriod; period &lt;= endPeriod; period++) { // look for a free block in this period int block = findFreeBlock(period, duration); // check if there is a block if (block != -1) { // reserve this block reserveAppointment(period, block, duration); return true; } } // no suitable block found return false; } . | . FRQ 2 . This FRQ is about class definitions, specifically for the Sign class | Sign class constructor has 2 params: message and width | message is split according to the width to display on a sign | numberOfLines method returns int of amount of lines needed to display | getLines returns message split with semicolons | . public Sign { // initialize private variables private int width; private String message; // constructor public Sign(String message, int width) { this.message = message; this.width = width; } // returns number of lines needed to display message public int numberOfLines() { // if message length is divisible by width, return message length / width int numLines = message.length() / width; // if message length is not divisible by width, add 1 to numLines // checks edge case for not divisible if (message.length() % width != 0) { numLines++; } return numLines; } // returns string needed to display message public String getLines() { // initialize string to return String lines = &quot;&quot;; // loop through message for (int i = 0; i &lt; message.length(); i++) { // add character to lines lines += message.charAt(i); // if index is divisible by width, add semicolon if (i % width == 0 &amp;&amp; i != 0) { lines += &quot;;&quot;; } } return lines; } } .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2023/05/09/ap-frqs.html",
            "relUrl": "/cb/2023/05/09/ap-frqs.html",
            "date": " • May 9, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "College Board FRQs",
            "content": "2014 FRQ #1 Part A (ArrayList FRQ) . Write the method scrambleword, which takes a given word and returns a string that contains a scrambled version of the word according to the following rules. . The scrambling process begins at the first letter of the word and continues from left to right. | If two consecutive letters consist of an &quot;A&quot; followed by a letter that is not an &quot;A&quot;, then the two letters are swapped in the resulting string. | Once the letters in two adjacent positions have been swapped, neither of those two positions can be involved in a future swap. | . public static String scrambleWord(String word) { String newWord = &quot;&quot;; for (int i = 0; i&lt;word.length()-1; i++) { if (word.charAt(i) == &#39;A&#39; &amp;&amp; word.charAt(i+1) != &#39;A&#39;) { newWord += word.charAt(i+1); newWord += word.charAt(i); i++; } else { newWord += word.charAt(i); } } return newWord; } // Test scrambleWord(&quot;ABRACADABRA&quot;); . BARCADABAR . 2014 FRQ#1 Part B (ArrayList FRQ) . Write the method scrarnbleOrRemove, which replaces each word in the parameter wordList with its scrambled version and removes any words that are unchanged after scrambling. The relative ordering of the entries in wordList remains the same as before the call to scrambleOrRemove. . public static void scrambleOrRemove(List&lt;String&gt; wordList) { for (int i = 0; i&lt;wordList.size(); i++) { String scrambled = scrambleWord(wordList.get(i)); if (scrambled.equals(wordList.get(i))) { wordList.remove(i); i--; } else { wordList.set(i, scrambled); } } } ArrayList&lt;String&gt; l = new ArrayList&lt;String&gt;(); l.add(&quot;TAN&quot;); l.add(&quot;ABRACADABRA&quot;); l.add(&quot;WHOA&quot;); l.add(&quot;APPLE&quot;); l.add(&quot;EGGS&quot;); scrambleOrRemove(l); System.out.println(l); . [TNA, BARCADABAR, WHO, PAPL, EGG] . 2017 FRQ#2 (Class FRQ) . The MultPractice class is a StudyPractice that produces multiplication practice problems. A MultPractice object is constructed with two integer values: first integer and initial second integer. The first integer is a value that remains constant and is used as the first integer in every practice problem. The initial second integer is used as the starting value for the second integer in the practice problems. This second value is incremented for each additional practice problem that is produced by the class. . // Base interface (made by college board) public interface StudyPractice { String getProblem(); void nextProblem(); } . public class MultPractice implements StudyPractice { private int firstNum; private int secondNum; public MultPractice(int first, int second) { firstNum = first; secondNum = second; } public String getProblem() { return firstNum + &quot; TIMES &quot; + secondNum; } public void nextProblem() { secondNum++; } } . // Tester Code StudyPractice sp = new MultPractice(7, 3); System.out.println(sp.getProblem()); sp.nextProblem(); sp.nextProblem(); System.out.println(sp.getProblem()); . 7 TIMES 3 7 TIMES 5 . 2017 FRQ#3a (Methods/Control Structures) . The Phrase class includes the method f indNthOccurrence, which returns the nth occurrence of a given string. You must use findNthOccurrence appropriately to receive full credit. Complete method replaceNthOccurrence below. . public class Phrase { private String currentPhrase; public Phrase(String a) { this.currentPhrase = a; } public String getPhrase() { return currentPhrase; } public int findNthOccurrence(String str, int n) { int ret = -1; String curStr = currentPhrase; int offset = 0; for (int i = 0; i&lt;n; i++) { ret = curStr.indexOf(str) + offset; if (ret - offset == -1) return -1; curStr = curStr.substring(ret - offset + 1, curStr.length()); offset += (ret - offset) + 1; } return ret; } public void replaceNthOccurence(String str, int n, String repl) { // FRQ Answer int occur = findNthOccurrence(str, n); if (occur == -1) return; currentPhrase = currentPhrase.substring(0, occur) + repl + currentPhrase.substring(occur + str.length(), currentPhrase.length()); } } Phrase p = new Phrase(&quot;aaaa&quot;); p.replaceNthOccurence(&quot;aa&quot;, 2, &quot;bbb&quot;); System.out.println(p.getPhrase()); . abbba . 2017 FRQ#3b (Methods/Control Structures) . Write the Phrase method f indLastOccurrence. This method finds and returns the index of the last occurrence of a given string in current Phrase. If the given string is not found, -1 is returned. The following tables show several examples of the behavior of the method findLastOccurrence. . public class Phrase { private String currentPhrase; public Phrase(String a) { this.currentPhrase = a; } public String getPhrase() { return currentPhrase; } public int findNthOccurrence(String str, int n) { int ret = -1; String curStr = currentPhrase; int offset = 0; for (int i = 0; i&lt;n; i++) { ret = curStr.indexOf(str) + offset; if (ret - offset == -1) return -1; curStr = curStr.substring(ret - offset + 1, curStr.length()); offset += (ret - offset) + 1; } return ret; } public void replaceNthOccurence(String str, int n, String repl) { int occur = findNthOccurrence(str, n); if (occur == -1) return; currentPhrase = currentPhrase.substring(0, occur) + repl + currentPhrase.substring(occur + str.length(), currentPhrase.length()); } public int findLastOccurrence(String str) { // FRQ Answer int og_occur = findNthOccurrence(str, 1); int prev_occur = og_occur; int cnt = 2; while (og_occur != -1) { prev_occur = og_occur; og_occur = findNthOccurrence(str, cnt); cnt++; } return prev_occur; } } // Tester code Phrase p = new Phrase(&quot;A cat ate late.&quot;); p.replaceNthOccurence(&quot;aa&quot;, 2, &quot;bbb&quot;); System.out.println(p.findLastOccurrence(&quot;ate&quot;)); System.out.println(p.findLastOccurrence(&quot;bat&quot;)); . 11 -1 . 2021 FRQ#4a (2D Array) . Write the method isNonZeroRow, which returns true if and only if all elements in row r of a two-dimensional array array2D are not equal to zero. . public static boolean isNonZeroRow(int[][] array2D, int r) { for (int i = 0; i&lt;array2D[r].length; i++) { if (array2D[r][i] == 0) return false; } return true; } // Tester code int[][] arr = {{2,1,0},{1,3,2},{0,0,0},{4,5,6}}; // expected: false, true, false, true for (int i = 0; i&lt;arr.length; i++) { System.out.println(isNonZeroRow(arr, i)); } . false true false true . 2021 FRQ#4b (2D Arrays) . Write the method resize, which returns a new two-dimensional array containing only rows from array2D with all non-zero values. The elements in the new array should appear in the same order as the order in which they appeared in the original array. . // method provided by college board (not part of FRQ) public static int numNonZeroRows(int[][] array2D) { int count = 0; for (int i = 0; i&lt;array2D.length; i++) count += isNonZeroRow(array2D, i) ? 1 : 0; return count; } public static int[][] resize(int[][] array2D) { int row = 0; int[][] ret = new int[numNonZeroRows(array2D)][array2D[0].length]; for (int i = 0; i&lt;array2D.length; i++) { if (isNonZeroRow(array2D, i)) { ret[row] = array2D[i]; row++; } } return ret; } // Tester code int[][] arr = {{2,1,0},{1,3,2},{0,0,0},{4,5,6}}; int[][] arrNew = resize(arr); for (int i = 0; i&lt;arrNew.length; i++) { for (int j = 0; j&lt;arrNew[i].length; j++) { System.out.print(arrNew[i][j] + &quot; &quot;); } System.out.println(); } . 1 3 2 4 5 6 .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2023/04/25/frqs.html",
            "relUrl": "/cb/2023/04/25/frqs.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Merge Sort",
            "content": "Hack 1/2 (works with any comparable type) . class MergeSort&lt;T extends Comparable&lt;T&gt;&gt; { public void sort(List&lt;T&gt; arr, int l, int r) { if (l &lt; r) { // find midpoint int m = l + (r - l) / 2; // sort top and bottom half sort(arr, l, m); sort(arr, m + 1, r); // merge the two sub arrays merge(arr, l, m, r); } } private void merge(List&lt;T&gt; arr, int l, int m, int r) { // Find the sizes of two subarrays to be merged int n1 = m - l + 1; int n2 = r - m; /* Create temp arrays */ List&lt;T&gt; L = new ArrayList&lt;T&gt;(n1); List&lt;T&gt; R = new ArrayList&lt;T&gt;(n2); /* Copy data to temp arrays */ for (int i = 0; i &lt; n1; ++i) L.set(i, arr.get(l + i)); for (int j = 0; j &lt; n2; ++j) R.set(j, arr.get(m + 1 + j)); /* Merge the temp arrays */ // Initial indexes of first and second subarrays int i = 0, j = 0; // Initial index of merged subarray array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (L.get(i).compareTo(R.get(j)) &lt;= 0) { arr.set(k, L.get(i)); i++; } else { arr.set(k, R.get(i)); j++; } k++; } /* Copy remaining elements of L[] if any */ while (i &lt; n1) { arr.set(k, L.get(i)); i++; k++; } /* Copy remaining elements of R[] if any */ while (j &lt; n2) { arr.set(k, R.get(j)); j++; k++; } } } .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2023/04/18/merge-sort.html",
            "relUrl": "/cb/2023/04/18/merge-sort.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Binary Search",
            "content": "Hack 1/2 . public class BinarySearch { public static void sort(int arr[], int l, int r) { if (l &lt; r) { // find midpoint int m = l + (r - l) / 2; // sort top and bottom half sort(arr, l, m); sort(arr, m + 1, r); // merge the two sub arrays merge(arr, l, m, r); } } public static void merge(int arr[], int l, int m, int r) { // Find the sizes of two subarrays to be merged int n1 = m - l + 1; int n2 = r - m; /* Create temp arrays */ int[] L = new int[n1]; int[] R = new int[n2]; /* Copy data to temp arrays */ for (int i = 0; i &lt; n1; ++i) L[i] = arr[l + i]; for (int j = 0; j &lt; n2; ++j) R[j] = arr[m + 1 + j]; /* Merge the temp arrays */ // Initial indexes of first and second subarrays int i = 0, j = 0; // Initial index of merged subarray array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (L[i] &lt;= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[i]; j++; } k++; } /* Copy remaining elements of L[] if any */ while (i &lt; n1) { arr[k] = L[i]; i++; k++; } /* Copy remaining elements of R[] if any */ while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } public static int binarySearch(int e, int[] arr, int l, int r) { if (l == r) return arr[l] == e ? l : -1; int m = (l + r)/2; if (e &lt;= arr[m]) { return binarySearch(e, arr, l, m); } return binarySearch(e, arr, m+1, r); } public static void main (String[] args) { int array[] = {1, 3, 5, 7, 9, 23, 45, 67}; sort(array, 0, array.length - 1); System.out.println(binarySearch(45, array, 0, array.length - 1)); } } .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2023/04/18/binary-search.html",
            "relUrl": "/cb/2023/04/18/binary-search.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Arrays and 2D Arrays",
            "content": "Arrays . Arrays are 10-15% of the exam, so it is very important to understand the basics of arrays. Collegeboard will typically test you on: . Representing multiple items as array objects | Traversing an array by accessing the elements using iteration statements | Standard algorithms that utilize array traversals to perform functions | . Array Basics . An array can contain primitives (int, char, etc) and object references of a class. Primitive data types have their actual values stored in contiguous memory location. . Important things to note are that: . Arrays are fixed in size | Arrays can be used as a static field, local variable, or method parameter | . . //BASIC ARRAY CONCEPTS //Declare an array and then allocate memory int myArray[]; myArray = new int[4]; //Declare while directly assign values int[] myArray1 = new int[]{ 1, 6, 7, 9}; //Initialize element myArray[0] = 2; //Create an array of objects Object[] arr = new Object[5]; . Traversing an Array . Common ways to traverse an array include for loops and enhanced for loops: . A for loop allows you to access the index, and manipulations can be done by changing the incrementer (ie. i+=2 instead of i++) | An enhanced for loop is simpler but you CANNOT access the index, only the value | . //Basic for loop to print elements of array int[] arr1 = {0, 6, 8, 2}; // Looping through array by incrementing value of i //&#39;i&#39; is an index of array &#39;arr1&#39; for (int i = 0; i &lt; arr1.length; i++) { // Print array element present at index i System.out.println(i + &quot; &quot; + arr1[i]); } // NOTE: You may also use an enhanced for loop for(int value: arr1){ System.out.println(value); } . 0 0 1 6 2 8 3 2 0 6 8 2 . Hack: Create method that sets all elements in array to n . void setArray(int[] arr, int n) { // your code here } int[] array = new int[10]; setArray(array, 10); for (int i = 0; i&lt;array.length; i++) { System.out.println(array[i]); } // Should print all 10s when working properly . 0 0 0 0 0 0 0 0 0 0 . Developing Algorithms Using Arrays . Arrays are an essential part in developing algorithms. It is important to understand how to traverse an array and the structure of an array to accomplish this. . There are lots of algorithms you can create,and CollegeBoard goes over a lot of good examples of this. They go over this in the 6.4 unit videos. . //Example finding the max in an array. //Finds the maximum in an array public static int maximum(int[] array) { //variable that holds value of max value int maxValue = array[0]; //for each number in the array.. for (int number: array) { //checks if current index is greater than maxValue if (number &gt; maxValue) { //if new max value found, replace current maxValue maxValue = number; } } return maxValue; } //tester array int[] test = {3, 5, 7, 2, 10}; //returns 10 maximum(test); . 10 . Generally, when you are coding algorithms using arrays you will probably use some traversal element. The key thing to think about is what you want to do for each element, because once you have a repeatable action you can just put it in a for loop. You also want to consider which elements you actually want to look at beacuse in some causes you may want to skip some elements. . Think?: What should be changed in the code above to find the minimum? . Hack: Write an array to find the average of an array . //Example finding the max in an array. //Finds the maximum in an array public static int average(int[] array) { // put your code here return 0; } //tester array int[] test = {3, 5, 7, 2, 10}; //returns 10 System.out.println(average(test)); . 0 . 2-D Arrays . 2-D arrays are 7.5-10% of the exam, so they are also very important to know for the AP exam. Many concepts of 2-D arrays rely on a solid understanding of arrays. . A 2-D array is an array of arrays, and store data similar to a row and column fashion. . Length is determined by the number of rows in the array, which is also the number of arrays in the 2-D array. . Columns is based on the size of each row of an array and can be determined based on the number of elements in the first row. . 2-D Array Basics . //create a new 2-d array (default to all 0s) int[][] twoDArray = new int[3][3]; //access the value at row 2 column 1 twoDArray[1][0]; //get value at the end of a 2-d array // (twoDArray.length - 1) gets how many arrays (rows) // (twoDArray[0].length - 1) gets how many elements in first array (columns) twoDArray[twoDArray.length - 1][twoDArray[0].length - 1]; . 0 . The 2D array is useful to represent a matrix as well, which then can be accessed by the rows and columns. This is a good way to visualize a 2d array. Here, I will show an example of how a &quot;grid&quot; looks like + initialization . // GRID of our array // 4 5 6 // 7 8 9 // 1 2 3 // Initializing our array int[][] twoDArray = { {4,5,6}, {7,8,9}, {1,2,3} } . Traversing 2-D Arrays . 2-D arrays are traversed similarly to arrays in that you will primarily use for and while loops. However, since there are both rows and columns now, you will need to use nested for loops or nested enhanced for loops. . //Prints the 2-d array public static void print2D(int mat[][]) { // For each row of the array (goes one array at a time) for (int row = 0; row &lt; twoDArray1.length; row++) { //Goes through each element of the array for (int column = 0; column &lt; twoDArray1[row].length; column++) System.out.print(mat[row][column] + &quot; &quot;); // runs for every row (not every element) System.out.println(); } } int twoDArray1[][] = { { 1, 2, 3 }, { 4, 6, 7 }, { 8, 9, 10} }; print2D(twoDArray1); . 1 2 3 4 6 7 8 9 10 . When traversing 2-D arrays it is important to note wether the code is in row-major or column-major order. This basically indicates what the outer for loop of the method is traversing. . If the outer loop is going by column, its in column major order. If the outer loop is going by row, its in row-major order. . The code example above is in row-major order . When you are traversing, again make sure to consider the pros/cons of for vs enhanced for loop (for loop allows you to mess with index). This can be useful to again think about which elements you actually want to take actions on. Furthermore, you may also consider actions that you only want to do for every row, or every column. This could be opposed to every element, in which case you would put it in the outer for loop (see the System.out.println() in above code) . Think: What would this code print and why (without running it yourself)? . public static void main(String[] args){ int[][] arrayOne = new int[5][7]; for (int row = 0; row &lt; arrayOne.length; row++){ for (int col = 0; col &lt; arrayOne[row].length; col++){ arrayOne[row][col] = row+col - 1; } } System.out.println(arrayOne[4][6]); } . Hack: Find the average number of a diagonal in a 2d array . For example, here find the average of the bolded #s 1 2 3 4 5 6 7 8 9 1 2 3 . public static int averageDiagonal (int[][] array2D) { // your code here return 0; } int[][] arr = { {1,2,3,4,5,6}, {7,8,9,10,11,12}, {0,1,2,3,4,5}, {10,11,12,13,14,15}, {15,16,17,18,19,20} }; System.out.println(averageDiagonal(arr)); . 0 .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2023/04/18/arraysandmore.html",
            "relUrl": "/cb/2023/04/18/arraysandmore.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "CSU San Marcos Talk 3/28",
            "content": "Insights . I learned that CSU San Marcos is a great choice for university due to its many clubs and internship opportunities. I also learned how important CS is in a variety of fields, especially in science such as physics. I also learned that it is important to reach out for internships and other opportunities, and to know your worth. Finally, it is important to keep track of student loans and other debts as these can be really bad if not managed properly. | . Ashley . Came to CalState because she loved Physics and done some quantam stuff Before didn’t do so well on classes but still continued | Had a good physics background at the SM | It was a good location for her, failed in calc originally but still continued | Now is doing PhD of material sciences even though she started from a bad point | She uses computer science in physics like python to visualize data | . | . John . He did a lot of online learning at CalState Says computer science degree is versatile, spent 6 years for field | . | . About CSU SM . Newest CSU and has a new tutoring center | Highest social mobility for CSU which helps people get up the ladder | Lots of internships with local companies | New program for masters in Cybersecurity and Computer Engineering | Curriculum is more updated to current trends rather than previous stuff and can transition majors easier | Physics is very hands on and can transition into engineering with that | Very good to be involved in clubs such as cybersecruity and robotics | . Internship . Good to get work experience | You can join clubs or also go to networking events and googling as well as your email | You should be getting paid for an internship, don’t do unpaid | Get people to check your applications and essays | . Programs . summer program to do research with an advisor and got paid 6000 for the summer | admitted students: Quantam Bridge Program | . Research . opporurtunities in materials, quantum, and meteriote research | Also some AI research and VR | . Paying for College . Look on your own for scholarships and you can get it for a lot of things | Grants is more about your economic status and your grades | College debt is very real and there are two types of loans: try to avoid loans and if you have to get subsidized loans | Actually think about your financing | Apply for FAFSA at studentaid.gov | Go to community college first if you are smart | . Life after College . companies can pay to get your master degrees | get internships or jobs to raise money | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2023/03/28/csuevent.html",
            "relUrl": "/misc/2023/03/28/csuevent.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Data Types Hacks",
            "content": "Binary Addition Seed . import java.util.*; public class BinaryAddition { static Scanner sc = new Scanner(System.in); public static int inputBinary (String prompt) { System.out.print(prompt); int deciOne = sc.nextInt(); System.out.println(deciOne); int binOne = 0; for (int i = 10; i&gt;=0; i--) { binOne += (int)((deciOne % Math.pow(10,i+1)) / Math.pow(10,i)) * (Math.pow(2,i)); } return binOne; } public static String addBin (int numOne, int numTwo) { String sum = &quot;&quot;; int carryOver = 0; for (int i = 0; i&lt;=33; i++) { int first = numOne % 2; int second = numTwo % 2; if (first + second + carryOver &gt; 1) { sum = (char)(&#39;0&#39; + (first + second + carryOver - 2)) + sum; carryOver = 1; } else { sum = Integer.toString(first + second + carryOver) + sum; carryOver = 0; } numOne = numOne &gt;&gt; 1; numTwo = numTwo &gt;&gt; 1; } // cut string while (sum.charAt(0) == &#39;0&#39; &amp;&amp; sum.length() &gt; 1) { sum = sum.substring(1, sum.length()); } return sum; } public static void main (String[] args) { int numOne = inputBinary(&quot;Input first binary number: &quot;); int numTwo = inputBinary(&quot;Input second binary number: &quot;); String sum = addBin(numOne, numTwo); System.out.println(&quot;The sum is: &quot; + sum); } } BinaryAddition.main(null); . Input first binary number: 1 Input second binary number: 1 The sum is: 10 . int/Integer . void swap (int a, int b) { int temp = a; a = b; b = temp; } int a = (int)(Math.random()*100); int b = (int)(Math.random()*100); System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); swap(a, b); // values stay the same System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); int c = a + b; System.out.println(&quot;c = &quot; + c); . a = 85 and b = 90 a = 85 and b = 90 c = 175 . void swap (Integer a, Integer b) { Integer temp = a; a = b; b = temp; } Integer a = new Integer((int)(Math.random()*100)); Integer b = (int)(Math.random()*100); ArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;(); arr.add(a); arr.add(b); System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); swap(arr.get(0), arr.get(1)); // values stay the same System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot; arr (2nd) = &quot; + arr.get(1)); Integer c = a + b; System.out.println(&quot;c = &quot; + c); . arr (1st) = 95 and arr (2nd) = 31 arr (1st) = 95 and arr (2nd) = 31 c = 126 . double/Double . void swap (double a, double b) { double temp = a; a = b; b = temp; } double a = Math.random(); double b = Math.random(); System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); swap(a, b); // values stay the same System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); double c = a + b; System.out.println(&quot;c = &quot; + c); . a = 0.5392976519054533 and b = 0.7136309112889999 a = 0.5392976519054533 and b = 0.7136309112889999 c = 1.2529285631944531 . void swap (Double a, Double b) { Double temp = a; a = b; b = temp; } Double a = new Double(Math.random()); Double b = new Double(Math.random()); ArrayList&lt;Double&gt; arr = new ArrayList&lt;&gt;(); arr.add(a); arr.add(b); System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); swap(arr.get(0), arr.get(1)); // values stay the same System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); double c = a + b; System.out.println(&quot;c = &quot; + c); . arr (1st) = 0.8714734691329225 and arr (2nd) = 0.958581170162068 arr (1st) = 0.8714734691329225 and arr (2nd) = 0.958581170162068 c = 1.8300546392949903 . boolean/Boolean . void swap (boolean a, boolean b) { boolean temp = a; a = b; b = temp; } boolean a = true; boolean b = false; System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); swap(a, b); // values stay the same System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); boolean c = a || b; System.out.println(&quot;c = &quot; + c); . a = true and b = false a = true and b = false c = true . void swap (Boolean a, Boolean b) { Boolean temp = a; a = b; b = temp; } Boolean a = true; Boolean b = false; ArrayList&lt;Boolean&gt; arr = new ArrayList&lt;&gt;(); arr.add(a); arr.add(b); System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); swap(arr.get(0), arr.get(1)); // values stay the same System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); boolean c = a || b; System.out.println(&quot;c = &quot; + c); . arr (1st) = true and arr (2nd) = false arr (1st) = true and arr (2nd) = false c = true . char/Character . void swapCh (char a, char b) { char temp = a; a = b; b = temp; } char a = &#39;a&#39;; char b = &#39;b&#39;; System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); swapCh(a, b); // values stay the same System.out.println(&quot;a = &quot; + a + &quot; and &quot; + &quot;b = &quot; + b); char[] c = {a, b}; String str = new String(c); System.out.println(&quot;str = &quot; + str); System.out.println(&quot;str substring 0 to 1 = &quot; + str.substring(0,1)); . a = a and b = b a = a and b = b str = ab str substring 0 to 1 = a . void swapCh (Character a, Character b) { Character temp = a; a = b; b = temp; } Character a = new Character(&#39;a&#39;); Character b = new Character(&#39;b&#39;); ArrayList&lt;Character&gt; arr = new ArrayList&lt;&gt;(); arr.add(a); arr.add(b); System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); swapCh(arr.get(0), arr.get(1)); // values stay the same System.out.println(&quot;arr (1st) = &quot; + arr.get(0) + &quot; and &quot; + &quot;arr (2nd) = &quot; + arr.get(1)); char[] c = new char[arr.size()]; for (int i = 0; i&lt;arr.size(); i++) { c[i] = arr.get(i); } String str = new String(c); System.out.println(&quot;str = &quot; + str); System.out.println(&quot;str substring 0 to 1 = &quot; + str.substring(0,1)); . arr (1st) = a and arr (2nd) = b arr (1st) = a and arr (2nd) = b str = ab str substring 0 to 1 = a .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2023/03/06/datatypes.html",
            "relUrl": "/cb/2023/03/06/datatypes.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "AP CSA 66 Question MC",
            "content": "MC Mistakes &amp; Reflections . Score: 63/66 (.95/1) | Total: .95+score=score/3 | Time: 78 minutes | . Question 36 . . This question was missing the context on the classes, so it was basically impossible to get the right answer. I had to guess | . Question 52 . . I misread the question thinking the method was supposed to return the new price, however it was supposed to modify the instance variable | To modify the instance variable += must be used resulting in the right answer | . Question 54 . . I misread the question thinking it was looking for a string with increasing characters | However it is checking if the first character is more than the second character, so it is looking for a decreasing string (“edcba”) | . Overall . I think I did much better on this MC than the 55 question one because I spent more time and I am overall happy with my score. There were a couple questions I misread but I don’t think this is very major. .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2023/01/26/mc2.html",
            "relUrl": "/cb/2023/01/26/mc2.html",
            "date": " • Jan 26, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "AP CSA 55 Question MC",
            "content": "MC Mistakes &amp; Reflections . Score: 43/52 (.9/1) | Total: .9+1.8=2.7/3 | Time: 67 minutes Question 5 . . | I assumed that the row and column for loops were flipped, namely that each line would contain one row of array data | The loops were switched such that the outer for loop was looping through the columns Therefore, each line corresponded to one column in the array, which would have yielded the right answer | . | . Question 7 . . Again I misread the function, I assumed the result string put a “1” if the characters at the same position were equal in both strings, yielding my answeer | In the actual function, if the characters at the same position were equal in both strings, the same character was appended to the result This results in the “1” at the end of the result string being replaced with a “0” rather than “1” yielding the correct answer | . | . Question 11 . . Here, I thought that the numbers would be concatinated with the string, resulting in 12Z | The flaw in my logic is that first 1 and 2 would be added before being cocantinated with Z This resulted in the answer of “3Z” rather than “12Z” | . | . Question 14 . . Here, I was thinking that normally the outer for loop would reference arr rather than arr[0] | Since it was using columns, the existing reference to arr[0] is correct | The column index is not iterable, so that resulted in the actual problem, replacing the enhanced for loop to use the iterable arr | . Question 22 . . Here was just a misread, I thought the array was 3x4 however it was actually a 4x4 leading to the correct answer of 16 | . Question 25 . . I did not fully iterate through this code in my head resulting in the right answer | If you do this problem thoroughly and on paper you will get the right answer | . Question 35 . . In this case I saw the general purpose of the for loop and for which elements it would print | I misread the loop printing the value of the array rather than the index resulting in my wrong answer | . Question 37 . . I misread the quetion as I thought that it appended str2 to str1 | However, the actual order was str2 and then str1 resulting on str2 always having an index of 0 | . Question 38 . . I misread the for loop thinking it would reverse the whole string | The loop only goes for i &gt; 0 which means it skips the first character resulting in the right answer | . Overall . I think my weak areas was silly mistakes and rushing through questions. I had some time left so I could have used that to more throughly go through the questions. I could also stuedy array for loops a bit more because I made some mistakes on that .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2023/01/20/mc1.html",
            "relUrl": "/cb/2023/01/20/mc1.html",
            "date": " • Jan 20, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Units 6-10 Jupyter Notebook",
            "content": "Homeworks . Unit 6: .9/1 | Unit 7: 1/1 | Unit 8: .9/1 | Unit 9: .95/1 | Unit 10: 1/1 | Unit 10 was probably the best homework because it had creativity and you could choose what type of recursion to show your knowledge | Total: 4.75/5 | . Unit 6: Arrays . Arrays are important to store a &quot;list&quot; of data in the same type | Watch out for errors: especially ArrayIndexOutOfBoundsException | Important to know algorithms with arrays -&gt; using for loops Enhanced for loops can be utilized but has limitations | Algorithms can be like finding max, min, average, sorting, etc. | . | . Algorithm for arrays . Many algorithms can be done using for loops in combinations with arrays | Here is an algorithm example of counting numbers that multiples of 5 but not 3 | . int[] array = {1, 2, 3, 4, 5, 10, 15}; for (int num : array) { if (num % 5 == 0 &amp;&amp; num % 3 != 0) { System.out.println(num); } } . 5 10 . Unit 7: ArrayList . An arraylist is like an array but the length can be changed | For arraylists you must use a wrapper class rather than a primitive Due to arraylist using generics | . | Arraylists can also work with enhanced for loops and have many convenient functions | . Wrapper Classes . Must be used with arraylist for primitives, usually a capital version | Java can automatically convert between wrappers and primitives | . // using &quot;Integer&quot; wrapper class ArrayList&lt;Integer&gt; listOfIntegers = new ArrayList&lt;&gt;(); // Explicitly creating integer listOfIntegers.add(new Integer(10)); // automatically converts to Integer listOfIntegers.add(1); // using toString method of ArrayList System.out.println(listOfIntegers); . [10, 1] . Unit 8: 2D Arrays . Arrays can be placed inside arrays, creating 2D array Useful for representing 2d space, or text (as 2d) | . | Defined by using two pairs of square brackets after the type | Can be traversed using nested for loops | . Nested For loops . Concept of putting one for loop inside another | Really useful for traversing 2d arrays | . // defining 2d array int[][] arr2d = { {1, 2, 3}, {4, 5, 6, 7}, {8, 9, 10} }; // using nested for loops for (int[] row : arr2d) { for (int val : row) { System.out.print(val + &quot; &quot;); } System.out.println(); } . 1 2 3 4 5 6 7 8 9 10 . Unit 9: Inheritance . Inheritance can be used when two classes share similar functionality Allows super class to have base functionality (ie. car) | Sub class adds additional functionality to the base (ie. tesla car) | . | &quot;extends&quot; and &quot;abstract&quot; keywords can be used to define inheritance in Java | . Extends key word . Defines a sub class that inherits all the methods from the super class | Useful because you don&#39;t need to redefine everything from super class | . public class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } public void sayHello () { System.out.println(&quot;hello, I am &quot; + color + &quot; and I am &quot; + age + &quot; years old.&quot;); } public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { this.color = color; this.age = age; this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } } Cat c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); // using method from parent class c.sayHello(); // using method from child class c.sayOwner(); . hello, I am green and I am 2 years old. My owner is joe . Subclass constructor, super Keyword . The constructor in a subclass can use &quot;super&quot; to access the parent class constructor | &quot;super&quot; can also be used to access parent class methods | . public class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } public void sayHello () { System.out.println(&quot;hello, I am &quot; + color + &quot; and I am &quot; + age + &quot; years old.&quot;); } public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } public void sayOwnerAndHello() { super.sayHello(); sayOwner(); } } Cat c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); c.sayOwnerAndHello(); . hello, I am green and I am 2 years old. my owner is joe . Overriding (part of Polymorphism) . Allows you to define a method in the parent class, but then change it in child class | Really useful to change functionality in child class | . public class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } public void sayHello () { System.out.println(&quot;hello, I am &quot; + color + &quot; and I am &quot; + age + &quot; years old.&quot;); } public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } // Adding more functionality in say hello for cat @Override public void sayHello() { super.sayHello(); System.out.println(&quot;meow...&quot;); } } // Cat uses cat method Cat c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); c.sayHello(); // Animal uses animal method Animal a = new Animal(&quot;blue&quot;, 3); a.sayHello(); . hello, I am green and I am 2 years old. meow... hello, I am blue and I am 3 years old. . Abstract Class, Abstract Method . Abstract class means a class cannot be instantiated, it is simply a template | Abstract methods define the signature but the method must be implemented in child class | For example, lets say we don&#39;t want an animal to be created... | . abstract class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } // must be defined in child class abstract void sayHello (); public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } // Defining method that was abstract @Override public void sayHello() { System.out.println(&quot;meow...&quot;); } } // Cat uses cat method Cat c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); c.sayHello(); . meow... . Late binding of object (part of polymorphism) . Allows you to use the type of a superclass but have an object of the subclass | Useful if you know it will be part of the superclass, but don&#39;t know which subclass it is I know it is an animal but I don&#39;t know which type | . | Works well with abstract methods | . abstract class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } // must be defined in child class abstract void sayHello (); public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } // Defining method that was abstract @Override public void sayHello() { System.out.println(&quot;meow...&quot;); } } // Defining cat as an animal! Animal c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); // can use because abstract method guarentees implentation in child class c.sayHello(); . meow... . Overloading (part of polymorphism) . Allows you to have a method, but different sets of arguments | The method which is called is determined at compile time (early binding) based on the arguments passed in | . abstract class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } // must be defined in child class abstract void sayHello (); public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } // Defining method that was abstract @Override public void sayHello() { System.out.println(&quot;meow...&quot;); } // same method with different arguments public void sayHello(String person) { System.out.println(&quot;meow... hello &quot; + person); } } Cat c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); // two different argument sets for same method c.sayHello(); c.sayHello(&quot;mark&quot;) . meow... meow... hello mark . Standard methods: toString(), equals(), hashCode() . All objects automatically inherit from Object class and have some methods toString should list properties, equals should compare properties, hashCode should give unique identifier | . | . abstract class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } // must be defined in child class abstract void sayHello (); public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } // Defining method that was abstract @Override public void sayHello() { System.out.println(&quot;meow...&quot;); } // same method with different arguments public void sayHello(String person) { System.out.println(&quot;meow... hello &quot; + person); } // Overriding the to string @Override public String toString () { return &quot;[Cat]: &quot; + &quot;color=&quot; + color + &quot;, &quot; + &quot;age=&quot; + age + &quot;, &quot; + &quot;owner=&quot; + owner; } } // Object superclass is automatically inherited Object c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); // System.out.println uses toString method internally System.out.println(c); . [Cat]: color=green, age=2, owner=joe . Unit 10: Recursion . Recusion can be used in situations where you need to repeatedly do something, instead of loops | Recursion must call itself and have a base case Base case allows the recursion to end at some point | . | . Big O Notation . Used to describe the most time it would take for a function to run (without constants) | For example, the recursion below would take O(n) time as it has to go through n iterations to calculate the factorial | . public int factorial (int n) { if (n == 0 || n == 1) { return 1; } return n * factorial(n-1); } System.out.println(factorial(5)); . 120 .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/12/13/units610.html",
            "relUrl": "/cb/2022/12/13/units610.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Compsci/Business Panel 12/13",
            "content": "Overall insights . I learned a lot from this speaker event. One of the key things was that I learned that it is necessary to work in a team and work fast, to reach project deadlines and to quickly adapt to new trends. I also learned that you must be able to learn on the spot as new technologies are always coming out and you need to “learn how to learn.” Additional learnings is that you can always pivot your career as for the speakers they may have not started out in CS or their original field but by just contionusly trying to learn they were able to enter a new career path and see new opportunties. The mission statements also made me realize how much of an impact we can have on the world through our work in computer science. . Kathyleen . Was Born in Vietnam, moved to California in 1980, and Bay Area in 2004 | Studying abroad in Spain was very key experience in her life | Looks forward to next cool place in the planet she can be in | Non Traditional Education: Master’s degree from USC (MBA) &amp; Bachelor’s in Finance Was investment banker in finance for some time | . | Mission Statement from Maya Angelou: “My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style.” | Worked in HP, Qualcomm, and ThermoFisher Scientific | Learned how to surf in San Diego | Felt that tech was her calling and future | Feels happy that in her job, big tech companies are making a huge contribution to the world example: qualcomm chips are in 99% of smartphones, 1 billion people lives impacted by qualcomm tech | . | ThermoFisher is a big company with 125K employees, 7k scientists, $1.5B, $40B | The process in their enterprise is similar to our own How to make money with product | Roles in team (ie. Scrum master) | Trying to listen to customers | Design phase | Release | Consult the scrum master to release to the market | . | Frontend and Backend developers are necessary for everything to wrok | . HP Misson Statement . Create technology that makes lif better for everyone, everywhere | . Qualcomm Misson Statement . Inventing the technology the world loves | . ThermoFisher Scientific Misson Statement . Enable our customers to make the world healthier, cleaner, and safer | . All Companies Misson Statement (similar attributes) . Working to help customers lives and create new technology | . Kris . Works in SRE, DevOps, Infrastructure (many different names for roles) | Similar to CS students, took a bunch of math/physics classes in high school | Originally not directly in CS, Went to UCLA for electrical engineering for bachelors and masters Allowed him to go into his first CS class but didn’t do so well | . | Did research with IoT in undergraduate and graduate studies Biological readings with embedded Networked Sensors to get with AI | Key to learn about linux which he gained from this | . | After grad school, limited hiring due to economic downturn | Took many different jobs until reaching an email marketing automation start up First big experience with devops and redunancy/security | Then worked at NBCUniversal with their first streaming platform | . | Also worked with some geofencing on phones to see if they are near stores After company wasn’t doing well, moved over to qualcomm with a lot of devops | . | Two years ago started working in twitter which is really big tech with a huge site and graphql graphql is an alternative to REST, soon to be used in twitter a lot more | Got services and information from users &amp; got extensive training | At there he did continious learning which is key to always be learning new thing | . | Worked on streaming, analytics, financial systems/banking, twitter data centers, graphql component of the data center. All helped people visualize and understand data about the | Rest API to graphql | . | Soon going to start working at a Web3 infrastructure company | For doing AI tensorflow and ai is used | In twitter used custom web frameworks as well as monorepo which combines everything in one repo | . Q &amp; A . Q: Do you have any experience with agile methodology? A: Technically, different companies have their own versions of “agile” | A: There is organization in order to coordinate all the employees to reach goals | A: “Sprints” are a key concept to do things in 1-3 months vs 6-12 months | . | Q: Do you still work at Twitter (Kris)? A: No, moved on but looked for jobs as soon as Twitter acquisition possible | A: Good decision as whenever mergers or acquisitions happen layoffs are possible | . | Q: How do you think AI can be used? A: Can be used to predict when to turn off servers or when demand will be low | A: Key to see where the customers are and predict what to sell | . | Q: What are important skills to have in the tech industry? A: Two important skills that are continous learning (learn how to learn), don’t be scared of risk/take advantage of learning opportunity | A: Other skills is to be adaptable to whatever jobs or what life throws at you, and being able to listen/to translate to technology/speeaking to non technical people | . | Q: How do interviews work in big tech? A: They give you a short time to code something and it should compile with no errors | A: Use your negotiating leverage in the fact that tech companies are in demand (a lot of companies force you to work a lot but be careful so you don’t get exploited) | . | Q: How are you judged in the professional scene? A: Judged for explaining process and problem solving | Ex. “How many tennis balls in the United States?”, what is your thought process | . | Q: What are you planning on doing in the future? A: Blockchain technology, AWS, companies with their own data centers | . | Q: How does coding help with investment and finance? A: Machine learning and data storage to better service people | A: Stocks and automated options for finance. | . | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/12/13/speakerevent.html",
            "relUrl": "/misc/2022/12/13/speakerevent.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Units 1-5 Jupyter Notebooks",
            "content": "Grading . Unit 1: Us | Unit 2: 1/1 | Unit 3: .9/1 | Unit 4: .8/1 | Unit 5: .9/1 | . Unit 1: Primitives (our lesson) . Two main types of data in java: primitives (int, boolean, char, double) and objects (Strings, other classes) | Primitives can be compared with == while for classes it is necessary to use the .equals() method | Primitives do not have methods and properties while these are present in classes (ie. String length() method) | Homework N/A since we presented this unit | . Casting (Division/Rounding) . In order to do division with numbers, casting to double is necessary | When casting is done from double to integer, the number is ALWAYS rounded down (truncated) | . int a = 5; int b = 2; // Without casting (rounds down to 2) System.out.println(a/b); // With casting to double (gives correct answer of 2.5) System.out.println((double)a/(double)b); double c = 6.7; // Without casting (shows full decimal) System.out.println(c); // WIth casting to integer (rounds down to 6) System.out.println((int)c); . 2 2.5 6.7 6 . Wrapper Classes, why wrap int, double. . Wrapper classes are used to convert primitives in a class, necessary for types which use generic (ex. ArrayList) . int a = 6; // DOES NOT WORK: unexpected type (because primitive) // ArrayList&lt;int&gt; list = new ArrayList&lt;int&gt;(); // Using &quot;Integer&quot; wrapper class ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); // Creating &quot;Integer&quot; from int Integer a_wrap = new Integer(a); list.add(a_wrap); // Using java to automatically cast int to Integer list.add(a); // Both elements are there System.out.println(list); . [6, 6] . Unit 2: Using Objects . Objects are just an instance created out of a class created w/ a constructor (which takes in parameters describing the object | Methods in objects can be void (returns nothing) or have a return type specified | Static methods and properties are tied to class rather than object (ie. same value for all objects) | Methods can be overloaded (have different sets of parameters) as long as order of types differs between method definitions even with same name | Homework | . Concatenation . Allows you to combine strings together using + sign | If string is added to a non string type, the toString method is used, or for primitives it is automatically converted to string | . public class CoolClass { public String toString() { return &quot;a cool class&quot;; } } String a = &quot;a string&quot;; String b = &quot; and another string &quot;; int c = 10; CoolClass d = new CoolClass(); // Adding two strings together System.out.println(a + b); // Adding string and primitive (integer); System.out.println(a + b + c); // Adding string and other object (uses toString) System.out.println(a + b + d); . a string and another string a string and another string 10 a string and another string a cool class . Math class . Math class is useful for many mathematical operations such as square root and power | Also useful for random numnber generation, Math.random gives number 0-1 which can be scaled to any set of numbers (see below code) | . int n = 10; // random number from 1-n // 10 random numbers for (int i = 0; i&lt;10; i++) { int random_number = (int)(Math.random() * n + 1); // cast to int ensures resulting output is whole number System.out.println(random_number); } . 10 1 10 6 2 5 1 6 8 10 . Comparing Numbers/Strings/Objects . Numbers can be compared using the &quot;==&quot; operator | Objects such as strings must be compared using &quot;.equals()&quot; rather than &quot;==&quot; operator The &quot;==&quot; operator comapres the memory location rather than contents of object | . | . int a = 0; int b = 0; int c = 1; // Comparing two same numbers System.out.println(a == b); // Comparing two different numbers System.out.println(a == c); String as = new String(&quot;crazy&quot;); String bs = new String(&quot;crazy&quot;); // Comparing the same string to itself (SAME memory location) System.out.println(as == as); // Comparing strings with same content using wrong operator (DIFFERENT memory location) System.out.println(as == bs); // Comparing strings with same content using correct .equals() System.out.println(as.equals(bs)); . true false true false true . Unit 3: Booleans/If statement . Booleans store a true/false value (can only be one of these) | Booleans can be generated using comparison expressions (equal/==, greater than/&gt;, less than/&lt;, etc.) | If statements take in a boolean or boolean expression and run if the expression evaluates to &quot;true&quot; | Else &amp; Else if statements can be used in conjunction with if statements to run code if the if statement evaluates to false | Homework | . Compound Boolean Expression . Using combinations of boolean operators, you can make compound boolean expressions | Operators that can be used include and (&amp;&amp;), or (||), not (!), as well as parenthesis for grouping purposes | . boolean a = true; boolean b = false; // Creating a compound expression boolean compound = !(a &amp;&amp; b) &amp;&amp; (b || a) &amp;&amp; (!b &amp;&amp; !a); // Printing the result System.out.println(compound); . false . Truth Tables . Can be used to see the values of boolean expressions | For example, below is truth tables for and/or ### AND X | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | ### OR X | 0 | 1 | 0 | 0 | 1 | 1 | 1 | 1 | | . De Morgan&#39;s Law . Useful for simplifying boolean expresison | States that !(a &amp;&amp; b) = !a || !b AND !(a || b) = !a &amp;&amp; !b (ie. distribute and switch the middle sign) | . boolean a = true; boolean b = false; boolean c = true; boolean d = false; // complicated boolean expression boolean res1 = !((!(a &amp;&amp; b)) || (!(a || b))); // simplified using De Morgan&#39;s Law once boolean res2 = !((!a || !b) || (!a &amp;&amp; !b)); //simplified using De Morgan&#39;s Law twice boolean res3 = !(!a || !b) &amp;&amp; !(!a &amp;&amp; !b); // all results are the same System.out.println(res1 + &quot; &quot; + res2 + &quot; &quot; + res3); . false false false . Unit 4: Iteration . While loop runs while a boolean condition is true (be careful with infinite loops!) | For loops create a variable which is modified on every loop iteration and has an end condition (useful for iterating through arrays, especially in different ways based on the modification, ie. i += 2 for all even indexes) | For &amp; while loops can be nested inside each other to achieve more iteration (really useful with 2D arrays) | For each/Enhanced for loops really useful for looping through an array (int val : array) but limited in that they go through all elements from first to last and that cannot be modified | Homework | . For loop/Enhanced for loop . For loops can be used to iterate through an index, and modify it in different ways in the for loop declaration | The enhanced for loop is exclusively used for iterating fully through an iterable (such as array) | . // looping through even numbers for (int i = 0; i&lt;10; i+=2) { System.out.println(i); } int[] arr = {1, 2, 3, 7, 8}; // looping through array with conventional for lopo for (int i = 0; i&lt;arr.length; i++) { System.out.println(arr[i]); } // looping through array with enhanced for loop for (int i : arr) { System.out.println(i); } . 0 2 4 6 8 1 2 3 7 8 1 2 3 7 8 . While loop versus Do While loop . While loops run while a condition is true, the condition is checked before each iteration of the code is run | Do while loops also run while a condition is true, but the condition is checked AFTER each iteration of the code is run This means that no matter what the do block runs at least once before the condition is checked | . | . int i = 0; boolean falseBool = false; // printing even numbers with while loop while (i &lt; 10) { System.out.println(i); i += 2; } // if condition is false while loop does not run at all while (falseBool) { System.out.println(&quot;inside while loop&quot;); } // if condition is false in do while, the loop runs once do { System.out.println(&quot;inside do-while loop&quot;); } while (falseBool); . 0 2 4 6 8 inside do-while loop . nested Loops . Loops can be used inside each other for better iteration | Especially useful for 2D arrays | . int[][] arr = { {1, 2, 3}, {2, 3, 4}, {4, 5, 6} }; // using nested for loops for 2D array for (int i = 0; i&lt;arr.length; i++) { for (int j = 0; j&lt;arr[i].length; j++) { System.out.print(arr[i][j] + &quot; &quot;); } System.out.println(); } . 1 2 3 2 3 4 4 5 6 . Unit 5: Writing Classes . Classes can be used for creating objects and have two main things: properties and methods | Properties are used to store information about each object of a class (can be made private/public which determines accessibility outside of class) | Methods are used to modify the object &amp; do things | Getter and Setter Methods can be used to modify properties of a class which are made private | Homework | . Creating a Class, describe Naming Conventions . Class can be created using the class keyword | Class should be defined using upper camelcase (camelcase but first letter capital) | . // creating a class class MyClass { } . Main Method . The main method is used to test a class, is automatically called when class ran | Usually creates an object and can test methods | . class MyClass { // main method public static void main (String[] args) { MyClass obj = new MyClass(); } } MyClass.main(null); . This keyword . The &quot;this&quot; keyword allows you to access properties of the class | See constructor example to see use of this keyword | . Constructor . Constructor is called whenver the object is created, usually initializes fields | Does not return anything because the object is automatically given to the user when constructor is called | . class MyClass { int prop1; int prop2; // Constructor here public MyClass (int prop1input, int prop2input) { // setting properties using this to reference prop1 &amp; prop2 of the object this.prop1 = prop1input; this.prop2 = prop2input; } public static void main (String[] args) { MyClass obj = new MyClass(1, 2); } } MyClass.main(null); . Accessor/Getter methods . Used to get properties of an object from the outside the class definition | Getters can be applied on only the properties which should be accessed outside the class | . class MyClass { int prop1; int prop2; // Constructor here public MyClass (int prop1input, int prop2input) { // setting properties using this to reference prop1 &amp; prop2 of the object this.prop1 = prop1input; this.prop2 = prop2input; } // getter allows outside class to access prop1 public int getProp1() { return this.prop1; } public static void main (String[] args) { MyClass obj = new MyClass(1, 2); // using getter to access prop1 System.out.println(obj.getProp1()); } } MyClass.main(null); . 1 . Mutator/setter methods . These methods allow the properties which should be modifiable to be chagned outside the class definition | These methods have a &quot;void&quot; return type since they don&#39;t need to return anything, since they are only setting values | . class MyClass { int prop1; int prop2; // Constructor here public MyClass (int prop1input, int prop2input) { // setting properties using this to reference prop1 &amp; prop2 of the object this.prop1 = prop1input; this.prop2 = prop2input; } // getter allows outside class to access prop1 public int getProp1() { return this.prop1; } // setter allows outside class to set prop1 public void setProp1 (int propVal) { this.prop1 = propVal; } public static void main (String[] args) { MyClass obj = new MyClass(1, 2); // using getter to access prop1 System.out.println(obj.getProp1()); // changing value of prop1 obj.setProp1(10); // using getter to access new value of prop1 System.out.println(obj.getProp1()); } } MyClass.main(null); . 1 10 . Access modifiers . Access modifiers control whether properties and methods can be accessed outside the class | The public means the property/method is accessible outside while if it is private it is not accessible | . class MyClass { // prop1 cannot be directly accessed private int prop1; // prop2 can be directly accessed public int prop2; // Constructor here public MyClass (int prop1input, int prop2input) { // setting properties using this to reference prop1 &amp; prop2 of the object this.prop1 = prop1input; this.prop2 = prop2input; } // getter allows outside class to access prop1 public int getProp1() { return this.prop1; } // setter allows outside class to set prop1 public void setProp1 (int propVal) { this.prop1 = propVal; } public static void main (String[] args) { MyClass obj = new MyClass(1, 2); // would throw error // obj.prop1 = 10; // works (because public) obj.prop2 = 11; System.out.println(obj.prop2); } } MyClass.main(null); . 11 . Static methods/properties . Static properties and methods are part of the class rather than each object | Static methods do not require an object, and static properties only have one instance that is the same for all objects | . class MyClass { // static method static String coolMethod (String a) { return a + &quot; cool&quot;; } // static property static int staticProp = 10; public static void main(String[] args) { // no object needed for any of this System.out.println(MyClass.coolMethod(&quot;test&quot;)); System.out.println(MyClass.staticProp); } } MyClass.main(null); . test cool 10 .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/11/28/units15.html",
            "relUrl": "/cb/2022/11/28/units15.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "AP Calendar",
            "content": "AP Calendar Code . This code answers parts a/b of FRQ from 2019. In addition, the methods marked &quot;no implementation shown&quot; were implemented so this could be used in a Spring project and properly function. This code featured heavy use of if statements and for loops as control structures as well as definining and using methods to complete the tasks layed out. . public class APCalendar { private static int firstDayOf1970 = 4; /** Returns true if year is a leap year and false otherwise. * isLeapYear(2019) returns False * isLeapYear(2016) returns True */ private static boolean isLeapYear(int year) { if (year % 400 == 0) return true; if (year % 100 == 0) return false; if (year % 4 == 0) return true; return false; } /** Returns the value representing the day of the week * 0 denotes Sunday, * 1 denotes Monday, ..., * 6 denotes Saturday. * firstDayOfYear(2019) returns 2 for Tuesday. */ private static int firstDayOfYear(int year) { int day = firstDayOf1970; for (int i = 1970; i&lt;year; i++) { if (isLeapYear(i)) day = (day + (366 % 7)) % 7; else day = (day + (365 % 7)) % 7; } return day; } /** Returns n, where month, day, and year specify the nth day of the year. * This method accounts for whether year is a leap year. * dayOfYear(1, 1, 2019) return 1 * dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year * dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. */ private static int dayOfYear(int month, int day, int year) { // base case if (month == 1) { return Math.min(day, 31); } // february if (month == 2) { return Math.min(day, 28 + (isLeapYear(year) ? 1 : 0)) + dayOfYear(month-1, 50, year); } // 31 day months if (month == 2 || month == 4 || month == 6 || month == 7 || month == 9 || month == 11) { return Math.min(day, 31) + dayOfYear(month-1, 50, year); } // 30 day months return Math.min(day, 30) + dayOfYear(month-1, 50, year); } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { int LeapYearAmount = 0; // defines the variable we&#39;re using to count the leap year amount for (int year = year1; year &lt;= year2; year++) { // for each year between year 1 and year 2 if (isLeapYear(year)) { // if the year is a leap year, add one to the count LeapYearAmount+=1; } } return LeapYearAmount; } /** Returns the value representing the day of the week for the given date * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { int DayFirst = firstDayOfYear(year); // finds what the first day of the year is for the given year int DaysAfter = dayOfYear(month, day, year); // finds how many days after the start of the year int CalculatedDay = (DayFirst + DaysAfter - 1); // adds the amount to the first day and subtracts 1 int DayWeekReturn = CalculatedDay % 7; // changes from a number to a value 0-6 that gives the day of the week return DayWeekReturn; // returns the day of the week } /** Tester method */ public static void main(String[] args) { // Private access modifiers System.out.println(&quot;isLeapYear (2022): &quot; + APCalendar.isLeapYear(2022)); System.out.println(&quot;firstDayOfYear (2022): &quot; + APCalendar.firstDayOfYear(2022)); System.out.println(&quot;firstDayOfYear (2019): &quot; + APCalendar.firstDayOfYear(2019)); System.out.println(&quot;dayOfYear (1/1/2022): &quot; + APCalendar.dayOfYear(1, 1, 2022)); System.out.println(&quot;dayOfYear (3/1/2016): &quot; + APCalendar.dayOfYear(3, 1, 2016)); System.out.println(&quot;dayOfYear (3/1/2017): &quot; + APCalendar.dayOfYear(3, 1, 2017)); // Public access modifiers System.out.println(&quot;numberOfLeapYears (2000-2022): &quot; + APCalendar.numberOfLeapYears(2000, 2022)); System.out.println(&quot;dayOfWeek (1/1/2022): &quot; + APCalendar.dayOfWeek(1, 1, 2022)); System.out.println(&quot;dayOfWeek (1/10/2019): &quot; + APCalendar.dayOfWeek(1, 10, 2019)); } } . APCalendar.main(null); . isLeapYear (2022): false firstDayOfYear (2022): 6 firstDayOfYear (2019): 2 dayOfYear (1/1/2022): 1 dayOfYear (3/1/2016): 61 dayOfYear (3/1/2017): 60 numberOfLeapYears (2000-2022): 6 dayOfWeek (1/1/2022): 6 dayOfWeek (1/10/2019): 4 .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/11/14/ap-calendar.html",
            "relUrl": "/cb/2022/11/14/ap-calendar.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "AP CSA Tri 1 Final",
            "content": "Notes/Homework Unit 1-6 . Unit 1: Primitives (our lesson) . Two main types of data in java: primitives (int, boolean, char, double) and objects (Strings, other classes) | Primitives can be compared with == while for classes it is necessary to use the .equals() method | Primitives do not have methods and properties while these are present in classes (ie. String length() method) | Homework N/A (since we were assigned to present this) Unit 2: Using Objects . | Objects are just an instance created out of a class created w/ a constructor (which takes in parameters describing the object | Methods in objects can be void (returns nothing) or have a return type specified | Static methods and properties are tied to class rather than object (ie. same value for all objects) | Methods can be overloaded (have different sets of parameters) as long as order of types differs between method definitions even with same name | Homework Unit 3: Booleans/If statement . | Booleans store a true/false value (can only be one of these) | Booleans can be generated using comparison expressions (equal/==, greater than/&gt;, less than/&lt;, etc.) | If statements take in a boolean or boolean expression and run if the expression evaluates to “true” | Else &amp; Else if statements can be used in conjunction with if statements to run code if the if statement evaluates to false | De Morgan’s Law: !(a &amp;&amp; b) = !a || !b AND !(a || b) = !a &amp;&amp; !b (ie. distribute and switch the middle sign) | Homework Unit 4: Iteration . | While loop runs while a boolean condition is true (be careful with infinite loops!) | For loops create a variable which is modified on every loop iteration and has an end condition (useful for iterating through arrays, especially in different ways based on the modification, ie. i += 2 for all even indexes) | For &amp; while loops can be nested inside each other to achieve more iteration (really useful with 2D arrays) | For each/Enhanced for loops really useful for looping through an array (int val : array) but limited in that they go through all elements from first to last and that cannot be modified | Homework Unit 5: Writing Classes . | Classes can be used for creating objects and have two main things: properties and methods | Properties are used to store information about each object of a class (can be made private/public which determines accessibility outside of class) | Methods are used to modify the object &amp; do things | Getter and Setter Methods can be used to modify properties of a class which are made private | Homework Unit 6: Arrays . | Arrays can be created by creating a new object (new type[size]) or by the initialization syntax ({elem1, elem2, elem3}) | Arrays can be traversed using for loop (using array length as end condition) or using a enhanced for loop | Be careful with arrays to not go out of bounds (0..array.length-1) or you will get ArrayIndexOutOfBoundsException | Arrays can be used in combination with many algorithms such as sum, max, # of even/odd, etc. | Homework | . MC Score . My final score was 37/40, and I was pretty happy with this score as it would translate to a 5 on the AP Exam if I did decent on the FRQs and meant I got over a 90% on this. | . MC Mistakes &amp; Reflections . Question 15 . . I thought that I and II were correct code that achieved the objective as they both had a for loop and compared adjacent elements to see if they were sorted | I did not notice that for II, when k is data.length-1, the if statement will check data[data.length] and data[data.length-1] Since the indexes of the array range from 1..data.length-1, checking data[data.length] will throw an out of bounds exception | . | This means only I was correct and therefore answer choice A was correct | . Question 26 . . I thought that C was correct because it correctly used an enhanced for loop to traverse the array and checked if the element was odd correctly | The mistake with this answer choice was that it printed arr[x] utilizing x as an index This is incorrect since in an enhanced for loop, x actually represents the value in the array rather than an index | . | This means the correct answer choice was A which was identical to C but replaced arr[x] with x | . Question 30 . . I thought that B was the correct answer as I reasoned that it would first take the characters from index 3 to the end (“plier”), and then add the rest of the word (“com”) | I neglected to see that in the question the first substring was using howFar + 1 instead of howFar as the starting index This means the first string would be “lier” instead of “plier” making the answer “liercom” | . | This leads to the correct answer being C | . Overall Reflections . I felt pretty good about all the concepts covered as most of my mistakes were silly mistakes | In order to improve my score further I could focus on reading the question and answer choices more closely because that is where most of my mistakes came from | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/11/04/final-1.html",
            "relUrl": "/cb/2022/11/04/final-1.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 6 Homework",
            "content": "FRQ part a . . Solution . public void addMembers(String[] names, int gradYear) { for (int i = 0; i&lt;names.length; i++) { memberList.add(new Member(names[i], gradYear, true)); } } .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/10/30/unit-6-hw.html",
            "relUrl": "/cb/2022/10/30/unit-6-hw.html",
            "date": " • Oct 30, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "CB FRQ - Unit 2",
            "content": "Question 1A: Write the WordMatch method scoreGuess. To determine the score to be returned, scoreGuess finds the number of times that guess occurs as asubstring of secret and then multiplies that number by the square of the length of guess.Occurrences of guess may overlap within secret . The main method checks the FRQ returns the correct answers | . public class WordMatch { private String secret; public WordMatch (String word) { this.secret = word; } public int scoreGuess (String guess) { String word_copy = secret; int score = 0; for (int i = 0; i&lt;secret.length(); i++) { if (word_copy.indexOf(guess) == 0) score++; word_copy = word_copy.substring(1, word_copy.length()); } return score*guess.length()*guess.length(); } public static void main (String[] args) { WordMatch game1 = new WordMatch(&quot;mississippi&quot;); System.out.println(game1.scoreGuess(&quot;i&quot;)); System.out.println(game1.scoreGuess(&quot;iss&quot;)); System.out.println(game1.scoreGuess(&quot;issipp&quot;)); System.out.println(game1.scoreGuess(&quot;mississippi&quot;)); System.out.println(); WordMatch game2 = new WordMatch(&quot;aaaabb&quot;); System.out.println(game2.scoreGuess(&quot;a&quot;)); System.out.println(game2.scoreGuess(&quot;aa&quot;)); System.out.println(game2.scoreGuess(&quot;aaa&quot;)); System.out.println(game2.scoreGuess(&quot;aabb&quot;)); System.out.println(game2.scoreGuess(&quot;c&quot;)); } } WordMatch.main(null); . 4 18 36 121 4 12 18 16 0 . Question 1B: Write the WordMatch method findBetterGuess which returns the better guess of its two String parameters, guess1 and guess2. If the scoreGuess method returns different values for guess1 and guess2, then the guess with the higherscore is returned. If the scoreGuess method returns the same value for guess1 andguess2, then the alphabetically greater guess is returned. . The prints check that the FRQ returns the correct answers | . public class WordMatch { private String secret; public WordMatch (String word) { this.secret = word; } public int scoreGuess (String guess) { String word_copy = secret; int score = 0; for (int i = 0; i&lt;secret.length(); i++) { if (word_copy.indexOf(guess) == 0) score++; word_copy = word_copy.substring(1, word_copy.length()); } return score*guess.length()*guess.length(); } public String findBetterGuess (String guess1, String guess2) { int score1 = scoreGuess(guess1); int score2 = scoreGuess(guess2); if (score1 &gt; score2) return guess1; if (score1 &lt; score2) return guess2; return (guess1.compareTo(guess2) &gt; 0 ? guess1 : guess2); } public static void main (String[] args) { WordMatch game1 = new WordMatch(&quot;concatenation&quot;); System.out.println(game1.findBetterGuess(&quot;ten&quot;, &quot;nation&quot;)); System.out.println(game1.findBetterGuess(&quot;con&quot;, &quot;cat&quot;)); } } WordMatch.main(null); . nation con .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/2022/10/23/unit-2.html",
            "relUrl": "/2022/10/23/unit-2.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Homework - Unit 4",
            "content": "Here I use a caesar cipher of +3 to decode the messages. Overflow of characters is handled by the modulus operator. . public class CaesarCipher { public static String decode (String message) { String decoded = &quot;&quot;; for (int i = 0; i&lt;message.length(); i++) { if (message.charAt(i) &lt; &#39;a&#39; || message.charAt(i) &gt; &#39;z&#39;) { decoded += message.charAt(i); continue; } int letter = message.charAt(i)-&#39;a&#39;; int new_letter = (letter+3)%26; decoded += (char)(new_letter+&#39;a&#39;); } return decoded; } public static void main(String[] args) { String message1 = &quot;kfzb gly!&quot;; System.out.println(decode(message1)); String message2 = &quot;zlab zlab zlab&quot;; System.out.println(decode(message2)); String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; System.out.println(decode(message3)); } } CaesarCipher.main(null); . nice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/2022/10/23/caesar.html",
            "relUrl": "/2022/10/23/caesar.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Qualcomm Talk",
            "content": "Qualcomm Speaker Series - WeSTEM to connect students with STEM professionals (Introduction of Engineering) . Summary: . Qualcomm is a great company working on many things such as wireless technology, mobile, 5G, etc. The two speakers, Suma and Nisha, were both engineers from Qualcomm who were able to join engineering through their interest and working hard to get through the ranks. Important skills they used were working with others and being able to solve problems. Especially emphasized by Suma, it is also important to work for your community and help them learn about STEM. Qualcomm is looking for software and hardware engineers so definitely look there in the future. . Speaker #1: Suma (Staff Engineer at Qualcomm, Wireless Technologies/Mobile Modems) . How she got interested in engineering: her mother taught her math and science really early before going to school &amp; school gave an “easy” education, math and science led to engineering | Views on Engineering (from students): application of math, science to be useful to society and make into a big topic | Views of Engineering: main motivation for her mother was the starting salary was high &amp; engineering solves the interesting &amp; challenging problems that the world faces | Choosing a Major: wondering which part of engineering should she choose and asked other parents &amp; friends about various fields in engineering (such as biomedical, software, hardware, industrial, civil, chemical, electrical, robotics, aeronautics, etc.), listed down all options to make a decision and understood what each field and reached decision of electronic/communication engineering (design/develop devices in communications devices) | College Experience: wanted to use software to solve electronics problems, placed into a company after college and did many different diverse positions | Workplace: shared experiences and learned together with other new college students in companies, the company really helped to give a mentor and guide her through the initial days in the company, at the time worked in latest 3G technology which was really cool (mostly in the network side at this time =&gt; for tmobile, verizon, etc.), heard about Qualcomm during a training session | (Qualcomm) Workplace: Qualcomm is working on mobile technologies such as snapdragon and also modems/5g/wireless technology, invented the CDMA technology which is important for wireless connection Quality Communications, Worked on many different projects (mainly NAS protocol stack with registration/deregistration of devices) in many domains such as automotives/mobile/smart meter/etc, 10% thinklab/volunteering activities in qualcomm, TEAM effort to complete all the projects across MANY departments | Breaks: plays tennis, does volunteering, and other activities with office and not always in front of the laptop | . Speaker #2: Nisha Sethia (Director of Engineering at Qualcomm, San Diego) . Apart from job: wife &amp; mother which keeps her busy | Kid: fascinated by how the engineerings &amp; her father’s engineering employees were able to solve interesting and important problems, her dad could help fix broken machines even though he didn’t have much training so this was really interesting, secretly went to father’s machines and try to experiment with that - only girl to enter that area | High School: had many options for classes in high school but also saw it was cool that being a doctor because it was saving lives but was also interested in engineering so in high school she chose both subjects and learned both (but by the end not really interested in medicine &amp; was not good at memorization) | College: going tinto college there was not much information and there was different majors but she chose Computer Engineering because she was interested in math and computers in high school (back then you had to wait 1 week to get 1 hour computer), important to ASK QUESTIONS in order to figure out the end objective, had to take Electrical Engineering because of class space btu she knew she could build on coding skills from this later | First Job: had to choose from many different options and in 2004 at this time cell phone industry still very small, wanted to get into wireless because she was really fascinated by that and joined a startup working on 2G startup (Systems Tests Engineering), verified the product was working per the design | Other jobs: took up the challenge throughout her career in software to continue working up the ladder and took many leadership roles such as getting software designs based on the requirements, moved from mobile to base station side in order to learn the end to end model of the cell phone | Qualcomm: she was excited to move to US and qualcomm because they were one of the trailblazers in the cell phone communications industry and joined for a 4G project in the company and now she is working on the 5G technology, has to lead a team of 50 people in her new project | . Question and Answer: . How do you know what side of engineering to pursue? | Nisha: it evolves over time and keep the growth mindset and think about what you are really interested in but try to narrow it down over time, try out different fields and also combine with your interests | Suma: you can google for what each of the types of engineerings do, where hardware engineerings design and develop the electronics and the software engineers write the software and code for the electronics | What universities specialize in software engineering? In those universities, what are the majors that would help me learn the necessary skills and concepts to get a software developer job in tech app companies (Google, Amazon, Apple, Qualcomm)? What should I do in high school to increase my chances to get admitted into them? | Sherley: Pretty much most colleges have some software engineering so you could really go into such as in here there is UC San Diego, any tech companies want software developers, software and hardware have to work together for a final product, all of these companies have the hardware engineers also, CHALLENGE yourself in high school by taking honors classes or other engineering classes and concurrent enrollment and outside clubs such as robotics | What is one thing you wish you had done earlier that would have helped you with engineering? | Suma: I used to participate in many tests for math and science and preparing for math and science exams really helped her get into the academies for engineering | Nisha: I wish I could have got more exposure to programming and some basic concepts and hardware/software designs and what they mean and she didn’t have the information to learn concepts early on which we should take advantage with | What are some of your biggest challenges and how did you handle them? | Suma: my biggest challenge is actually being mother and going on leave and coming back to work after it was taking a whole break and balancing with the work and life/being mother, helped by her manager and team member and eventually she was able to manage both the work and life | Nisha: Having priorities in work and life is the most important thing, there was also lack of representation in education and trying to find a mentor and role model in order to look up to, also hard to network during her time but now she is more fortunate because qualcomm is very diverse | Another question I had is that I am at a point where I am fluent in about 7 programming languages, and have a good understanding of problem solving - understanding the problem and also understanding what concepts are needed to solve them (I think that’s correct). I actually moved to this city just in July, one of the reasons being the opportunities present in engineering. What are some competitions that I can participate in where I can apply what I’ve learned? | Sherley: Look for robotics clubs at your school or just any clubs at your school that are doing coding or robotics, join the FIRST robotics program, check for job postings especially the game companies are trying to get their games tested by teens | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/10/11/qualcomm.html",
            "relUrl": "/misc/2022/10/11/qualcomm.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Week 5 AP CSA (Individual)",
            "content": "Fibonacci (Individual) . Link to Fibonacci | . Javascript (Individual) . Link to Mean Calculator | . Design (Team) . See Team Issue | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/09/24/week-5.html",
            "relUrl": "/misc/2022/09/24/week-5.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Fibonacci",
            "content": "Abstract Class . This Fibonacci abstract class creates data structures to store the fibonacci structure, methods to access and store the fibonacci data, and some data necessary for the timing. . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map long time; // stores the time it takes for code to run ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Default Fibo does 30 numbers @param: none */ public Fibo() { this(30); // telescope to avoid code duplication, using default as 30 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.time = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* Abstract method for how fibo is calculated */ abstract protected void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return an element of fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Time (ms) = &quot; + this.time); System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); System.out.println(&quot;fibonacci Sequence &quot; + (this.size) + &quot; = &quot; + this.getNthSeq(this.size-1)); } } . Fibo using a for loop . This class extends the Fibo class and therefore inherits methods and properties from Fibo class. Uses a for loop to calculate the Fibonacci sequence. . public class ForFibo extends Fibo { @Override protected void init () { long startTime = System.currentTimeMillis(); this.name = &quot;for&quot;; long[] fibo = new long[this.size]; fibo[0] = 0; fibo[1] = 1; this.setData(fibo[0]); this.setData(fibo[1]); for (int i = 2; i&lt;this.size; i++) { fibo[i] = fibo[i-1] + fibo[i-2]; this.setData(fibo[i]); } this.time = System.currentTimeMillis() - startTime; } public static void main (String[] args) { ForFibo forFib = new ForFibo(); forFib.print(); } } ForFibo.main(null); . Time (ms) = 0 Init method = for fibonacci Number 30 = 514229 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], 21=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946], 22=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711], 23=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657], 24=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368], 25=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025], 26=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393], 27=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418], 28=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]} fibonacci Sequence 30 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229] . Fibo using a While Loop . This class extends the Fibo class and therefore inherits methods and properties from Fibo class. Uses a while loop to calculate the Fibonacci sequence. . public class WhileFibo extends Fibo { @Override protected void init () { long startTime = System.currentTimeMillis(); this.name = &quot;while&quot;; long fib1 = 1; long fib2 = 0; this.setData(fib2); this.setData(fib1); int idx = 2; while (idx &lt; this.size) { this.setData(fib1 + fib2); long oldFib1 = fib1; fib1 += fib2; fib2 = oldFib1; idx++; } this.time = System.currentTimeMillis() - startTime; } public static void main (String[] args) { WhileFibo whileFib = new WhileFibo(); whileFib.print(); } } WhileFibo.main(null); . Time (ms) = 0 Init method = while fibonacci Number 30 = 514229 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], 21=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946], 22=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711], 23=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657], 24=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368], 25=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025], 26=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393], 27=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418], 28=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]} fibonacci Sequence 30 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229] . Recursion Method . This class extends the Fibo class and therefore inherits methods and properties from Fibo class. Uses a recursion to calculate the Fibonacci sequence which is much slower. . public class RecurseFibo extends Fibo { private long calculateFibo (int num) { if (num == 0) { return 0; } if (num == 1) { return 1; } return calculateFibo(num-1) + calculateFibo(num-2); } @Override protected void init () { long startTime = System.currentTimeMillis(); this.name = &quot;recursive&quot;; for (int i = 0; i&lt;this.size; i++) { this.setData(calculateFibo(i)); } this.time = System.currentTimeMillis() - startTime; } public static void main (String[] args) { RecurseFibo recurseFib = new RecurseFibo(); recurseFib.print(); } } RecurseFibo.main(null); . Time (ms) = 25 Init method = recursive fibonacci Number 30 = 514229 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], 21=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946], 22=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711], 23=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657], 24=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368], 25=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025], 26=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393], 27=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418], 28=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]} fibonacci Sequence 30 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229] . Dynamic Programming . This class extends the Fibo class and therefore inherits methods and properties from Fibo class. Uses recursion with dynamic programming to calculate the Fibonacci sequence. As the recursion redoes a lot of the calculations, a dynamic programming solution can be used to give it better speed (as seen by time being 25ms compared to other solutions at ~0ms). . public class DynamicFibo extends Fibo { private long[] cache; private long calculateFibo (int num) { if (num == 0) { return 0; } if (this.cache[num] != 0) { return this.cache[num]; } this.cache[num] = calculateFibo(num-1) + calculateFibo(num-2); return this.cache[num]; } @Override protected void init () { this.cache = new long[this.size]; this.cache[1] = 1; long startTime = System.currentTimeMillis(); this.name = &quot;dynamic&quot;; this.calculateFibo(this.size-1); // use generated cache to set data for (int i = 0; i&lt;this.size; i++) { this.setData(this.cache[i]); } this.time = System.currentTimeMillis() - startTime; } public static void main (String[] args) { DynamicFibo dynamicFib = new DynamicFibo(); dynamicFib.print(); } } DynamicFibo.main(null); . Time (ms) = 0 Init method = dynamic fibonacci Number 30 = 514229 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], 21=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946], 22=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711], 23=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657], 24=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368], 25=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025], 26=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393], 27=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418], 28=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811], 29=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]} fibonacci Sequence 30 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229] . For Skill 1.B, in all the examples I filled out different types of statements such as for, while, recusion, and even dynamic programming. . Addressing CollegeBoard Skill 4.C, we know results are the same because the algorithms perform the same oeprations and alwso the output from our print functions in all 3 methods is the same. . For Skill Skill 5.A, I&#39;ve added timers to each method where we can see recursion is the slowest because it has to recalculate a lot of value while the caching used in the for/while loops is faster. We can also see in the dynamic programming example the recursive solution can become much faster. .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/09/22/fib.html",
            "relUrl": "/cb/2022/09/22/fib.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Week 4 AP CSA",
            "content": "FRQ . Link to CollegeBoard FRQ | . Iteration Mini-lab . Link to Mini-Lab | . Using Iteration w/ Spring Boot (EXTRA) . Quiz | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/09/17/week-4.html",
            "relUrl": "/misc/2022/09/17/week-4.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "CollegeBoard FRQ",
            "content": "This question involves reasoning about one-dimensional and two-dimensional arrays of integers. You will write three static methods, all of which are in a single enclosing class, named DiverseArray (not shown). The first method returns the sum of the values of a one-dimensional array; the second method returns an array that represents the sums of the rows of a two-dimensional array; and the third method analyzes row sums. . In part (a), the instructions are to Write a static method arraySum that calculates and returns the sum of the entries in a specified one-dimensional array. . public static int arraySum (int[] arr1) { int sum = 0; for (int i = 0; i&lt;arr1.length; i++) { sum += arr1[i]; } return sum; } . Here we can test the method with the example array which is [1, 3, 2, 7, 3], which should have a sum of 16. . int[] arrayTest = {1, 3, 2, 7, 3}; System.out.println(arraySum(arrayTest)); . 16 . Part (b) asks to Write a static method rowSums that calculates the sums of each of the rows in a given two dimensional array and returns these sums in a one-dimensional array. The method has one parameter, a two dimensional array arr2D of int values. The array is in row-major order: arr2D[r][c] is the entry at row r and column c. The method returns a one-dimensional array with one entry for each row of arr2D such that each entry is the sum of the corresponding row in arr2D. . public static int[] rowSums(int[][] arr2D) { int[] sums = new int[arr2D.length]; //elements initialize to 0 for (int i = 0; i &lt; arr2D.length; i++) { for (int j = 0; j &lt; arr2D[i].length; j++) { sums[i] += arr2D[i][j]; } } return sums; } . Now we can test with the example: 1&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;3 10&nbsp;&nbsp;10&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;2 5&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;6 7&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;1 . The expected output here is {16, 32, 28, 20}. . int[][] arrayTest2D = { {1, 3, 2, 7, 3}, {10, 10, 4, 6, 2}, {5, 3, 5, 9, 6}, {7, 6, 4, 2, 1} }; int[] sums = rowSums(arrayTest2D); for (int i = 0; i&lt;sums.length; i++) { System.out.println(sums[i]); } . 16 32 28 20 . Part (c) asks us to Write a static method isDiverse that determines whether or not a given two-dimensional array is diverse. The method has one parameter: a two-dimensional array arr2D of int values. The method should return true if all the row sums in the given array are unique; otherwise, it should return false . public static boolean isDiverse (int[][] arr2D) { int[] sums = rowSums(arr2D); for (int i = 0; i &lt; sums.length; i++) { for (int j = i + 1; j &lt; sums.length; j++) { if (sums[i] == sums[j]) return false; // returns false if two elements are the same } } //if end is reached all elements have passed uniqueness test return true; } . We can test with the two provided examples which are diverse and not diverse. . This example is diverse: 1&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;3 10&nbsp;&nbsp;10&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;2 5&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;6 7&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;1 . This example is not diverse: 1&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;4 12&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;9 8&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;10&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;5 3&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;6 . int[][] arrayTestDiverse = { {1, 3, 2, 7, 3}, {10, 10, 4, 6, 2}, {5, 3, 5, 9, 6}, {7, 6, 4, 2, 1} }; int[][] arrayTestNotDiverse = { {1, 1, 5, 3, 4}, {12, 7, 6, 1, 9}, {8, 11, 10, 2, 5}, {3, 2, 3, 0, 6} }; System.out.println(isDiverse(arrayTestDiverse)); System.out.println(isDiverse(arrayTestNotDiverse)); . true false .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/09/16/cb-frq.html",
            "relUrl": "/cb/2022/09/16/cb-frq.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Iteration Rhyme Example",
            "content": "Here, I am using an example of deer getting hunted by tigers using iteration. Unlike the example from Mr. M I changed the for loops so the deer would print horizontally instead of vertically making it more compact. . import java.util.*; . public class DeerTiger { String[][] deers = { { &quot;( ) &quot;, &quot; `--(_ _)--&#39; &quot;, &quot; Y-Y &quot;, &quot; /@@ &quot;, &quot; / &quot;, &quot; `--&#39;. , &quot;, &quot; | `.__________/) &quot;, &quot; &quot;, &quot; &quot; }, { &quot; |/ |/ &quot;, &quot; / &quot;, &quot; _/ ___ ___ &quot;, &quot; o o-&#39; &#39;&#39;&#39; &#39; &quot;, &quot; O -. | &quot;, &quot; | |&#39;&#39;&#39;| | &quot;, &quot; || | | &quot;, &quot; || || &quot;, &quot; &quot; &quot; &quot; }, { &quot; { } &quot;, &quot; {^^, &quot;, &quot; ( `-; &quot;, &quot; _ `;;~~ &quot;, &quot; /(______); &quot;, &quot; ( ( &quot;, &quot; |:( ) &quot;, &quot; _// &quot;, &quot;/ / vv &quot; }, { &quot; ()&quot;, &quot; )) ((&quot;, &quot; // &quot;, &quot; | ____// |&quot;, &quot; ~/ ~ ~ /~~/&quot;, &quot; (| _/o ~~&quot;, &quot; / / ,|&quot;, &quot; (~~~)__.- |&quot;, &quot; ``~~ | |&quot;, &quot; | | |&quot; } }; String[] tiger = { &quot; __,,,,_&quot;, &quot; _ __..-;&#39;&#39;`--/&#39;/ /.&#39;,-`-.&quot;, &quot; /&#39;` | | | // // / -.,/_,&#39;-,&quot;, &quot; /&lt;7&#39; ; | ; ||/ /| | / |`-/,/-.,_,/&#39;)&quot;, &quot; / _.-, `,- ,__| _-| / /|_/ | &#39;-/.;. &#39;&quot;, &quot; `-` f/ ; / __/ __ `/ |__/ |&quot;, &quot; `-&#39; | -| =| _ |-&#39; |&quot;, &quot; __/ /_..-&#39; ` ),&#39; //&quot;, &quot; fL ((__.-&#39;((___..-&#39;&#39; __.&#39;&quot; }; public void printRhyme () { for (int count = 4; count &gt;= 1; count--) { System.out.println(&quot;Here comes &quot; + count + &quot; deer n&quot;); for (int i = 0; i&lt;deers[0].length; i++) { for (int j = 0; j&lt;count; j++) { System.out.print(deers[j][i] + &quot; &quot;); } System.out.println(); } System.out.println(&quot;Then the tiger arrives&quot;); for (int i = 0; i&lt;tiger.length; i++) { System.out.println(tiger[i]); } System.out.println(); System.out.println(&quot;Now there are &quot; + (count-1) + &quot; deer n&quot;); } } } . DeerTiger myRhyme = new DeerTiger(); myRhyme.printRhyme(); . Here comes 4 deer ( ) |/ |/ { } () `--(_ _)--&#39; / {^^, )) (( Y-Y _/ ___ ___ ( `-; // /@@ o o-&#39; &#39;&#39;&#39; &#39; _ `;;~~ | ____// | / O -. | /(______); ~/ ~ ~ /~~/ `--&#39;. , | |&#39;&#39;&#39;| | ( ( (| _/o ~~ | `.__________/) || | | |:( ) / / ,| || || _// (~~~)__.- | &#34; &#34; / / vv ``~~ | | Then the tiger arrives __,,,,_ _ __..-;&#39;&#39;`--/&#39;/ /.&#39;,-`-. /&#39;` | | | // // / -.,/_,&#39;-, /&lt;7&#39; ; | ; ||/ /| | / |`-/,/-.,_,/&#39;) / _.-, `,- ,__| _-| / /|_/ | &#39;-/.;. &#39; `-` f/ ; / __/ __ `/ |__/ | `-&#39; | -| =| _ |-&#39; | __/ /_..-&#39; ` ),&#39; // fL ((__.-&#39;((___..-&#39;&#39; __.&#39; Now there are 3 deer Here comes 3 deer ( ) |/ |/ { } `--(_ _)--&#39; / {^^, Y-Y _/ ___ ___ ( `-; /@@ o o-&#39; &#39;&#39;&#39; &#39; _ `;;~~ / O -. | /(______); `--&#39;. , | |&#39;&#39;&#39;| | ( ( | `.__________/) || | | |:( ) || || _// &#34; &#34; / / vv Then the tiger arrives __,,,,_ _ __..-;&#39;&#39;`--/&#39;/ /.&#39;,-`-. /&#39;` | | | // // / -.,/_,&#39;-, /&lt;7&#39; ; | ; ||/ /| | / |`-/,/-.,_,/&#39;) / _.-, `,- ,__| _-| / /|_/ | &#39;-/.;. &#39; `-` f/ ; / __/ __ `/ |__/ | `-&#39; | -| =| _ |-&#39; | __/ /_..-&#39; ` ),&#39; // fL ((__.-&#39;((___..-&#39;&#39; __.&#39; Now there are 2 deer Here comes 2 deer ( ) |/ |/ `--(_ _)--&#39; / Y-Y _/ ___ ___ /@@ o o-&#39; &#39;&#39;&#39; &#39; / O -. | `--&#39;. , | |&#39;&#39;&#39;| | | `.__________/) || | | || || &#34; &#34; Then the tiger arrives __,,,,_ _ __..-;&#39;&#39;`--/&#39;/ /.&#39;,-`-. /&#39;` | | | // // / -.,/_,&#39;-, /&lt;7&#39; ; | ; ||/ /| | / |`-/,/-.,_,/&#39;) / _.-, `,- ,__| _-| / /|_/ | &#39;-/.;. &#39; `-` f/ ; / __/ __ `/ |__/ | `-&#39; | -| =| _ |-&#39; | __/ /_..-&#39; ` ),&#39; // fL ((__.-&#39;((___..-&#39;&#39; __.&#39; Now there are 1 deer Here comes 1 deer ( ) `--(_ _)--&#39; Y-Y /@@ / `--&#39;. , | `.__________/) Then the tiger arrives __,,,,_ _ __..-;&#39;&#39;`--/&#39;/ /.&#39;,-`-. /&#39;` | | | // // / -.,/_,&#39;-, /&lt;7&#39; ; | ; ||/ /| | / |`-/,/-.,_,/&#39;) / _.-, `,- ,__| _-| / /|_/ | &#39;-/.;. &#39; `-` f/ ; / __/ __ `/ |__/ | `-&#39; | -| =| _ |-&#39; | __/ /_..-&#39; ` ),&#39; // fL ((__.-&#39;((___..-&#39;&#39; __.&#39; Now there are 0 deer .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/2022/09/13/iteration.html",
            "relUrl": "/pbl/2022/09/13/iteration.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Week 3 AP CSA",
            "content": "If statements lesson . See lesson | . Deployment . See deployed spring website | (EXTRA) Github actions for automatic deployment (will make article soon) | (EXTRA) Simple addition calculator on the springboot website | . Focus / Habits . See self reflection | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/09/10/week-3.html",
            "relUrl": "/misc/2022/09/10/week-3.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Self Reflection",
            "content": "Gratitude . Before I go into this, I would like to reflect on some things I am thankful for: . I am able to have shelter &amp; food which many people in the world do not have | I have an opportunity to go to such a great school | I am able to have a good computer for Computer Science | I have supportive friends in the area | I have time to work on projects and have fun for myself | . Past Projects/Accomplishments . I am a 2x CyberPatriot National Champion | I made an app with over 15000 downloads (Hangman Ad Free on Play Store) | I have had a successful paid internship with Scripps Research under the Su Lab | I have reached the Gold level in USACO (United States Computing Olympiad) | See more at my main website | . Future Goals . Have a successful interest meeting &amp; increase membership in the Algorithmic Problem Solving Club | Advance up to the Platinum level in USACO | Win the CyberPatriot National Finals again | Continue to do good in school | Keep some time to have fun! | . Reflections from Yale Video . We can control our hapiness, it is not just some extrensic factor | Your intituion isn’t always right and recognize that | Make time for social gatherings as we are social animals | Helping others improves your own hapiness | Try to be grateful for what you have (see above) | Being healthy helps a lot to make you more happy | Focus on the present moment rather than worrying about past or future | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/09/10/self-reflection.html",
            "relUrl": "/misc/2022/09/10/self-reflection.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "If Statements/Boolean Lesson",
            "content": "Boolean expressions . Boolean expressions are something that can be TRUE or FALSE . For example, we can check if two things are equal, greater than eachother or less than eachother. Here I have some examples of how these expresisons could be used in a quiz context. Below I have some equality examples . char correctAnswer = &#39;A&#39;; char user1Answer = &#39;B&#39;; char user2Answer = &#39;A&#39;; //Check if user 1&#39;s answer was equal to the correct answeer System.out.println(&quot;Is user 1 right?&quot;); System.out.println(user1Answer == correctAnswer); //Check if user 2&#39;s answer was equal to the correct answer System.out.println(&quot;Is user 2 right?&quot;); System.out.println(user2Answer == correctAnswer); . Is user 1 right? false Is user 2 right? true . We can also compare some values and see if they are greater or less than. . int user1Score = 100; int user2Score = 50; int targetScore = 75; //Check if user 1 reached target score System.out.println(&quot;Did user 1 reach the target score?&quot;); System.out.println(user1Score &gt;= targetScore); //Check if user 2 reached target score System.out.println(&quot;Did user 2 reach the target score?&quot;); System.out.println(user2Score &gt;= targetScore); . Did user 1 reach the target score? true Did user 2 reach the target false . An IF statement utilizes boolean expressions and DOES SOMETHING if the expression is true. For example we can use this on the previos two examples . char correctAnswer = &#39;A&#39;; char user1Answer = &#39;B&#39;; char user2Answer = &#39;A&#39;; //Check if user 1&#39;s answer was equal to the correct answeer if (user1Answer == correctAnswer) { System.out.println(&quot;User 1 is right&quot;); } //Check if user 2&#39;s answer was equal to the correct answer if (user2Answer == correctAnswer) { System.out.println(&quot;User 2 is right&quot;); } . User 2 is right . int user1Score = 100; int user2Score = 50; int targetScore = 75; //Check if user 1 reached target score if (user1Score &gt;= targetScore) { System.out.println(&quot;User 1 reached the target score&quot;); } //Check if user 2 reached target score if (user2Score &gt;= targetScore) { System.out.println(&quot;User 2 reached the target score&quot;); } . User 1 reached the target score . Now, going further what if we wanted to complete some action if the user DID NOT reach the target score. In this case we can use an ELSE statement. . int user1Score = 100; int user2Score = 50; int targetScore = 75; //Check if user 1 reached target score if (user1Score &gt;= targetScore) { System.out.println(&quot;User 1 reached the target score&quot;); } else { System.out.println(&quot;User 1 failed&quot;); } //Check if user 2 reached target score if (user2Score &gt;= targetScore) { System.out.println(&quot;User 2 reached the target score&quot;); } else { System.out.println(&quot;User 2 failed&quot;); } . User 1 reached the target score User 2 failed . Now, let&#39;s say that we want to give the points to answers, but there are different points for each answer choice. This would cause us to chain if logic, which is where we can use an ELSE IF statement. . char user1AnswerChoice = &#39;C&#39;; char user2AnswerChoice = &#39;A&#39;; char reallyCorrectAnswer = &#39;D&#39;; char correctAnswer = &#39;B&#39;; char partiallyCorrectAnswer = &#39;C&#39;; char reallyWrongAnswer = &#39;A&#39;; int user1Points = 0; int user2Points = 0; // process user 1&#39;s answer if (user1AnswerChoice == reallyCorrectAnswer) { // really correct answer is 30 points user1Points += 30; } else if (user1AnswerChoice == correctAnswer) { // correct answer is 20 points user1Points += 20; } else if (user1AnswerChoice == partiallyCorrectAnswer) { // partially correct answer is 10 points user1Points += 10; } else if (user1AnswerChoice == reallyWrongAnswer) { // a really wrong answer loses 10 points user1Points -= 10; } else { // 1 point for trying and not choosing the really wrong answer user1Points += 1; } //process user 2&#39;s answer if (user2AnswerChoice == reallyCorrectAnswer) { // really correct answer is 30 points user2Points += 30; } else if (user2AnswerChoice == correctAnswer) { // correct answer is 20 points user2Points += 20; } else if (user2AnswerChoice == partiallyCorrectAnswer) { // partially correct answer is 10 points user2Points += 10; } else if (user2AnswerChoice == reallyWrongAnswer) { // a really wrong answer loses 10 points user2Points -= 10; } else { // 1 point for trying and not choosing the really wrong answer user2Points += 1; } System.out.println(&quot;User 1 has &quot; + user1Points + &quot; points.&quot;); System.out.println(&quot;User 2 has &quot; + user2Points + &quot; points.&quot;); . User 1 has 10 points. User 2 has -10 points. . In this example, we see a lot of chaining with the if statements. This could be greatly simplified if we used a switch statement, which allows us to select code based on the value of a variable. See the example below the previous code transformed to switch cases. . Note that as shown below, the switch statement cases cannot have variables in them as they must be constant expressions. . char user1AnswerChoice = &#39;C&#39;; char user2AnswerChoice = &#39;A&#39;; int user1Points = 0; int user2Points = 0; // process user 1&#39;s answer switch (user1AnswerChoice) { case &#39;D&#39;: user1Points += 30; break; case &#39;B&#39;: user1Points += 20; break; case &#39;C&#39;: user1Points += 10; break; case &#39;A&#39;: user1Points -= 10; break; default: user1Points += 1; break; } //process user 2&#39;s answer switch (user2AnswerChoice) { case &#39;D&#39;: user2Points += 30; break; case &#39;B&#39;: user2Points += 20; break; case &#39;C&#39;: user2Points += 10; break; case &#39;A&#39;: user2Points -= 10; break; default: user2Points += 1; break; } System.out.println(&quot;User 1 has &quot; + user1Points + &quot; points.&quot;); System.out.println(&quot;User 2 has &quot; + user2Points + &quot; points.&quot;); . User 1 has 10 points. User 2 has -10 points. . Another thing to understand related to this is how to combine conditionals together using AND (&amp;&amp;) and OR (||). They mean what they say, AND returns true if both conditions is true while OR returns true if both or one of the conditions is true. See some examples below. The NOT (!) operator is also useful to flip a boolean value. . char correctAnswer = &#39;E&#39;; char user1Answer = &#39;D&#39;; char user2Answer = &#39;E&#39;; // Using AND operator if (user1Answer == correctAnswer &amp;&amp; user2Answer == correctAnswer) { System.out.println(&quot;Both users got it right&quot;); } // Using OR operator if (user1Answer == correctAnswer || user2Answer == correctAnswer) { System.out.println(&quot;At least one user got it right&quot;); } // Using AND + NOT operator if (!(user1Answer == correctAnswer &amp;&amp; user2Answer == correctAnswer)) { System.out.println(&quot;Both users DID NOT get it right&quot;); } // Using OR operator if (!(user1Answer == correctAnswer || user2Answer == correctAnswer)) { System.out.println(&quot;NEITHER user1 nor user2 got it right&quot;); } . At least one user got it right Both users DID NOT get it right . The final relevant thing to understand for if statements &amp; boolean expressions is De Morgan&#39;s Law. This is an important property that can allow you to switch your if statements with AND and OR. It states that NOT (A AND B) = (NOT A) OR (NOT B) and NOT (A OR B) = (NOT A) AND (NOT B). To illustrate this, I will simplify the last two if statements from the previous example using De Morgan&#39;s Law. . // Using first de morgan&#39;s law (Note the use of the != operator meaning NOT EQUAL TO) if (user1Answer != correctAnswer || user2Answer != correctAnswer) { System.out.println(&quot;Both users DID NOT get it right&quot;); } // Using second de morgan&#39;s law if (user1Answer != correctAnswer &amp;&amp; user2Answer != correctAnswer) { System.out.println(&quot;NEITHER user1 nor user2 got it right&quot;); } . Both users DID NOT get it right . Now we reach the end of this lesson. Here are some &quot;hacks&quot; I recommend you can do to further learn these concepts: . Create a quiz or other application that heavily utilizes if statements | Code a custom application in the spring app using if statements | Try to create a menu from scratch (without looking at Mr. M&#39;s code) as it is a great place to utilize switch cases | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/09/07/if.html",
            "relUrl": "/cb/2022/09/07/if.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Week 2 AP CSA",
            "content": "Using Objects Tech Talk/GUI . Visualization for AP Physics Written in java | Using GUI for displaying Cricket Scores | . Code.org . . The code.org taught me a lot about inheritance having to create the different types of painters | I had to use a lot of debugging in order to get the painter to do what I wanted it to do | I was able to start commenting some of my code with the goals that I want so it is more clear | . Extra Fastpages Hacks . Todo Page | Vocab Page Filters Posts with CB tag | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/cb/2022/09/05/week-2.html",
            "relUrl": "/pbl/cb/2022/09/05/week-2.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Cricket Scores GUI",
            "content": "import java.util.List; . %%loadFromPOM &lt;dependency&gt; &lt;groupId&gt;org.json&lt;/groupId&gt; &lt;artifactId&gt;json&lt;/artifactId&gt; &lt;version&gt;20090211&lt;/version&gt; &lt;/dependency&gt; . The CricketScores class uses static methods in order to pull cricket scores for a specific team . import java.net.http.*; import org.json.*; import java.util.List; public class CricketScores { private static Map&lt;String,String&gt; teamIds = new HashMap&lt;&gt;(); static { teamIds.put(&quot;IND&quot;, &quot;187765&quot;); teamIds.put(&quot;AFG&quot;, &quot;187575&quot;); teamIds.put(&quot;SL&quot;, &quot;187756&quot;); teamIds.put(&quot;PAK&quot;, &quot;187754&quot;); } public static List&lt;String[]&gt; getScores (String team) throws IOException, InterruptedException, JSONException { String teamId = teamIds.get(team); HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://cricketapi10.p.rapidapi.com/api/cricket/team/&quot;+teamId+&quot;/matches/previous/0&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;f58766a4c1msh85336d65179f2c3p15dc2bjsne94dee50a809&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;cricketapi10.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); JSONArray events = (new JSONObject(response.body())).getJSONArray(&quot;events&quot;); List&lt;String[]&gt; ret = new ArrayList&lt;String[]&gt;(); for (int i = events.length()-1; i&gt;Math.max(0, events.length()-5); i--) { JSONObject event = (JSONObject) events.get(i); String awayName = event.getJSONObject(&quot;awayTeam&quot;).getString(&quot;name&quot;); int awayScore = event.getJSONObject(&quot;awayScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;score&quot;); int awayWickets = event.getJSONObject(&quot;awayScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;wickets&quot;); int awayOvers = event.getJSONObject(&quot;awayScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;overs&quot;); String homeName = event.getJSONObject(&quot;homeTeam&quot;).getString(&quot;name&quot;); int homeScore = event.getJSONObject(&quot;homeScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;score&quot;); int homeWickets = event.getJSONObject(&quot;homeScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;wickets&quot;); int homeOvers = event.getJSONObject(&quot;homeScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;overs&quot;); String[] data = {event.getString(&quot;note&quot;), awayName + &quot;: &quot; + awayScore + &quot;/&quot; + awayWickets + &quot; in &quot; + awayOvers + &quot; overs&quot;, homeName + &quot;: &quot; + homeScore + &quot;/&quot; + homeWickets + &quot; in &quot; + awayOvers + &quot; overs&quot;}; ret.add(data); } return ret; } } . Here, the CricketJFrame is a class which can be instantiated as an object in order to create the Window which provides Cricket Scores for 3 teams (IND, SL, PAK) which can be chosen from the Menu items (Note that there may be an error for kernel crashing as this occurs once the window is closed) . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class CricketJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Team to select a team.&quot;); private JLabel[][] matches = { {new JLabel(&quot;&quot;), new JLabel(&quot;&quot;)}, {new JLabel(&quot;&quot;), new JLabel(&quot;&quot;)}, {new JLabel(&quot;&quot;), new JLabel(&quot;&quot;)}, {new JLabel(&quot;&quot;), new JLabel(&quot;&quot;)} }; public final String[] MENUS = { // 1D Array of Menu Choices &quot;IND&quot;, &quot;SL&quot;, &quot;PAK&quot; }; JPanel labelPanel = new JPanel(); // Constructor enables the Frame instance, the object &quot;this.frame&quot; public CricketJFrame() { // Initializing Key Objects frame = new JFrame(&quot;Cricket Scores&quot;); menubar = new JMenuBar(); menu = new JMenu(&quot;Teams&quot;); // Initialize panel &amp; message labelPanel.setLayout(new BoxLayout(labelPanel, BoxLayout.Y_AXIS)); message.setAlignmentX(Component.CENTER_ALIGNMENT); message.setVisible(false); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); labelPanel.add(message); labelPanel.add(Box.createGlue()); //Adding match JLabels for (JLabel[] lab : matches) { lab[0].setAlignmentX(Component.CENTER_ALIGNMENT); lab[1].setAlignmentX(Component.CENTER_ALIGNMENT); lab[0].setVisible(false); lab[1].setVisible(false); labelPanel.add(lab[0]); labelPanel.add(lab[1]); labelPanel.add(Box.createGlue()); } frame.add(labelPanel); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(400,400); // makes the frame object visible according to properties previously set frame.setVisible(true); } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action // run code based on the menuItem that was selected try { List&lt;String[]&gt; teamData = CricketScores.getScores(selection); message.setText(selection + &quot; Recent Cricket Matches&quot;); message.setVisible(true); for (int i = 0; i&lt;teamData.size(); i++) { System.out.println(i); // matches[i].setText(&quot;&lt;html&gt;&lt;div style=&#39;text-align: center; background: gray;&#39;&gt;&quot; + teamData.get(i)[0] + &quot;&lt;br/&gt;&quot; + teamData.get(i)[1] + &quot;&lt;br/&gt;&quot; + teamData.get(i)[2] + &quot;&lt;/div&gt;&lt;/html&gt;&quot;); // matches[i].setVisible(true); matches[i][0].setText(teamData.get(i)[0]); matches[i][1].setText(teamData.get(i)[1] + &quot; &quot; + teamData.get(i)[2]); matches[i][0].setVisible(true); matches[i][1].setVisible(true); } } catch (Exception ex) { System.err.println(&quot;Error occured&quot;); } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of CricketJFrame class, which makes a JFrame object new CricketJFrame(); } } CricketJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/cb/2022/09/01/cricket.html",
            "relUrl": "/pbl/cb/2022/09/01/cricket.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "GUI with WSL",
            "content": "Guide on how to get GUI on WSL . Download VcXsrv on your windows computer and run the installer (I recommend to add a desktop icon during installation to easily access the application) | In a file explorer open C: Program Files VcXsrv and search for “xlaunch.exe” and open (Alternatively if you set up a desktop icon during installation you can double click on that instead) create a “multiple window display” with “start no client”, and make sure in extra settings to check “Disable access control”, then press next/finish | Open a WSL window and open the ~/.bashrc file in vscode (code ~/.bashrc) or with nano (nano ~/.bashrc), in this file add the following lines export DISPLAY=$(ip route list default | awk &#39;{print $3}&#39;):0 export LIBGL_ALWAYS_INDIRECT=1 . | REOPEN your WSL window, and THEN Run code ~/vscode/[name of apcsa repo] to open a vscode window with your apcsa repo | Run your code, you may need to click the following icon on your taskbar to see the gui | Note: you may need to run xhost +local: &amp; restart VSCode . If you are getting errors about “java.lang.NoClassDefFoundError: Could not initialize class java.awt.GraphicsEnvironment$LocalGE” | See more details | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/08/31/gui.html",
            "relUrl": "/misc/2022/08/31/gui.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Physics Graph",
            "content": "For my AP Physics lab, we had to measure out the speeds of a slow &amp; fast car and then graph them which is shown below, using the XChart library. . import java.util.List; import java.util.stream.Collectors; . %%loadFromPOM &lt;dependency&gt; &lt;groupId&gt;org.knowm.xchart&lt;/groupId&gt; &lt;artifactId&gt;xchart&lt;/artifactId&gt; &lt;version&gt;3.5.2&lt;/version&gt; &lt;/dependency&gt; . %maven org.knowm.xchart:xchart:3.5.2 import org.knowm.xchart.*; . double[] xData = { 0.0, 2.71, 5.61 }; double[] xData2 = { 0.0, 1.4, 2.55 }; double[] yData = { 0.0, 1.0, 2.0 }; double[] yData2 = { 2.0, 1.0, 0.0 }; XYChart chart = new XYChartBuilder().title(&quot;Position vs Time&quot;).xAxisTitle(&quot;Time (s)&quot;).yAxisTitle(&quot;Position (m)&quot;).build(); chart.addSeries(&quot;Slow Car&quot;, xData, yData); chart.addSeries(&quot;Fast Car&quot;, xData2, yData); chart.addSeries(&quot;Reverse Slow Car&quot;, xData, yData2); . org.knowm.xchart.XYSeries@1f5bc85e . BitmapEncoder.getBufferedImage(chart); . BitmapEncoder.getBufferedImage(chart2); .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/cb/2022/08/29/physics-graph.html",
            "relUrl": "/pbl/cb/2022/08/29/physics-graph.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "AP CS Alumni Panel",
            "content": "The Panelists . Colin Szeto: Going to UCSD for mechanical engineering | Antohny Vo: Going to UC Irvine for computer science | Andrew: Going to Mira Costa, hoping to transfer to UCSD | Mabel Szeto: Going to UCSD for aerospace, transfering to cognitive science/machine learning | Allison: Going to UCLA for cognitive science w/ computing | Nitya: Going to UCSD for computer science | . Insights . Try to look at many different options when considering your major and do what you are passionate about | Have perserverance to keep trying in the face of errors and seeing other people that may be better than you | PBL &amp; Working together won’t leave you any time soon so make sure to develop those skills, especially in CS, and figure out strategies to work together | CS is really applicable even in other majors such as using MATLAB software, problem-solving skills, and automating tasks | It is really important to create a resume early as a lot of the interns are hired in September | It is good to work on personal projects to help you learn and stand out a lot | Learning fundemental algorithms such as path finding is really key to CS and real world applications | . Notes . How did you choose your major and how did CS classes help? . colin: I can code pretty well and 3D model even better, look outside of your classmates | anthony: started compsci from a very young age and really liked problem solving and leetcode, hooked from the intro to cs class | andrew: intro to cs allowed him to see the complexity and the theory behind the computer really likes the backends and deployment, reflected on what he wanted to do | mabel: kinda didn’t like his class and CS but knew that it was important to learn, haas been interning at northrop grumman, even aerospace and other majors needs programming, helping w/ mission planning for auto robotics | allison: more of an artsy/business person originally but wants to web design stuff in the future focusing on the UX/UI and knowing what the users want, learned the technical background from the CSP class | nitya: always interested in computer science while she was young, AP CSA helped her to apply the skills to solve the real world problems (covid 19 database) | . What is the biggest challenge you reached with CS? . colin: starting is the hardest part and github errors and keeping the motivation is really important, facing a lot of error messages and there is a solution, googling is really key | anthony: my biggest challenge is clashing egos because comp sci majors are not really kind and are just trying to flex to everyone which is frustrated, focus on your own path rather than everyone else | andrew: the theory behind CS is really hard and is about complicated things that you have to think about now which is a huge transition | mabel: it was hard finding the motivation to do CS, there is someone better than you, having a specific project and purpose helps you a lot, the syntax is frustrating originally | allison: starting is the obvious answer but another answer is the temptation to BS assignments and its important to actually try on the assignments properly, don’t cut corners and don’t focus only on the points, try to go above and beyond | nitya: just getting started in a new area in the computer science and you have to lose structure in computer science and everything is interconnected, you don’t need to have a fully fleshed out plan in the class | . Is there any PBL in College comp sci classes? . colin: one hands on project in freshman and one in senior in UCSD which is way less than what you are using in the CSA class so take advantage of that | andrew: there is PBL and tests which are both pretty equal so it is important to know the PBL and also be ready for the exams, especially in the upper division courses there are less exams and more of the PBL | mabel: first few years is a lot general education with a lot of people per class where the teacher can’t help you one-on-one so study groups are really important where you can use the PBL, some project classes and her friend had a “capstone project” class where they had to spend most of her time managing her group bc they were incompetent, this class is MUCH more structured than college where people can freeload off of you, find the style of working with others that is most efficient for you | . Have you applied CS in your major if you aren’t majoring in CS? . colin: there is a lot of menial tasks that can be really useful to be done using CS and that’s why scripts are really useful in other majors, coding is everywhere, MATLAB is really important for the mechanical statements were you use all the programming concepts | andrew: with high level math the CS can be useful especially with python and the math libraries | mabel: MATLAB and other tools like that and CAD softwares are where you can really use the CS in your major, and 3D printing you could code as well, had to do software in her internship, jupyter notebooks are also being used for technical papers to have the graphs | allison: creating a UX and UI you need to know the front end programming which is used in the cog science, stats courses make the computer science really useful to compute statistical values, programming in R is common for stats, MATLAB stuff even used in psycholo9gy where you wouldn’t even think of it | . For existing college students, have you had a job? . colin: put together a resume because that is important to apply for jobs, talk with teachers and go for the above and beyond and stand out with the teachers, show up to office hours and ask a lot of questions, you could be a teacher’s assistant, CSP python and scripting was really useful for the northrop grumman internship | anthony: this is a great coding school and he works at code ninja where he can teach people to code | mabel: one of the robotics lecturers is a lecturer at UCSD and you can see their research labs and clubs in other to get with the professor and ask if they have any space for you | allison: had an internship last year with a church group in order to design their website and do their branding and stuff | nitya: internship for northrop grumman as a highschool intern, exposed | . Did you focus on personal projects . andrew: balance on what you want to do and what you want to in school, have 2 or 3 personal projects | anthony: something for basketball teams | . How does algorithms help with CS? . andrew: path finding algorithms, freedy, sorting, graph, data vis | colin: a lot of simulations and stuff like in order to convert them into CS | mabel: titan AI is a cool club that does a bunch of robotics stuff, machine learning is cool because it stays in STEM major and it isn’t really CS, enjoyed cognitive science type classes, can pick electives that you want, also applies to the robotics team | . Any advice for internships? . anthony: expos let you make a resume, don’t focus too much on the other people’s linkedin | mabel: know when to apply and companies start hiring in september or november (year before), have a resume done by then, also have some linkedin and proof of what you have done, the SCHOOL doesn’t matter that much, clubs and personal projects really differentiate yourselves, smaller companies take high school interns and find things you are interested in, use parents to your advantage | andrew: build a giant network and the referrals can help you a lot | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/08/29/alumni.html",
            "relUrl": "/misc/2022/08/29/alumni.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Week 1 AP CSA",
            "content": "Code.org Lessons 1-5 (Unit 1) . . Code.org (Unit 2 – extra) . . Hacks from Myconnect . Post for primitives | Bash installation checker post – ALSO installs missing packages | Home page has tags to differentiate collegeboard vs pbl | . Extra fastpages hacks . Vocab page | Extra subject/Word Doc Page | Post with an image | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/cb/2022/08/28/week-1.html",
            "relUrl": "/pbl/cb/2022/08/28/week-1.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "How vaccination mandates have fared in the past",
            "content": "In his article “The U.S. Has Had ‘Vaccine Passports’ Before—And They Worked,” Jordan Taylor argues that vaccine passports should be used at the current time to promote the COVID-19 vaccination. More specifically, Taylor argues that this has been done successfully before and now it could help us return to normal life. The main argument used in the article is a historical analysis of the use of “vaccine passports” to combat smallpox by forcing people to get vaccines to enter the country, participate in jobs, or go to social gatherings. Taylor also shows the example of travelers to the US needing to provide vaccination proof in the 20th century, even though requirements in other types of documentation were much less stringent than today. As this program succeeded in near eradication of smallpox by the end of the 20th century, Taylor argues that a similar effect is possible with COVID-19 vaccines. The parallel nature of the situation back then and now is further established as the article highlights the similar concerns from the current time period and from back when smallpox vaccines were used. Such complaints included the fact that the smallpox vaccines were “government tyranny,” an argument much present in modern politics. itself as still an argument today. This also furthers the point as others argue that COVID vaccine mandates are taking pre-existing rights but Taylor shows a precedent of vaccine mandates nullifying this argument. Finally, the article also uses the credibility of doctors from the time who highlighted the importance of the smallpox vaccine to further the argument. Overall, this article presents a compelling argument for the use of vaccine passports in the contemporary time. . I agree with Taylor’s stance as I think vaccine passports would help limit the spread of COVID and in the long term could help to eradicate the disease. His basic argument makes sense as it shows the effectiveness of vaccine passports in the smallpox epidemic and highlights how this is similar to the COVID pandemic. This leads to a simple conclusion that vaccine passports would be helpful in combating COVID. I also want to highlight the pertinence of Taylor’s argument relating to vaccination requirements on entry to the United States, as it relates to issues today such as Novak Djokovic being banned from participating in the US Open for refusal of vaccination. All COVID vaccines used in the United States are at least 90% effective at stopping COVID-19 infection according to clinical trials (Katella). Although current vaccines do have some limitations against newer variants such as omicron, new booster shots are being worked on to target these variants which could be included in vaccine passports. The vaccine mandates have yielded decreased rates of infection and deaths at colleges that required vaccines (Acton et al.). This would show that requiring vaccines to do public activities could also decrease the spread of COVID-19 and decrease both deaths and cases. Overall, current evidence clearly supports Taylor’s claim that vaccine passports should be used and hence I agree with Taylor’s stance. . Works Cited . Acton, Riley K, et al. “The Effect of Vaccine Mandates on Disease Spread.” National Bureau of Economic Research, National Bureau of Economic Research, July 2022, https://www.nber.org/system/files/working_papers/w30303/w30303.pdf. . Katella, Kathy. “Comparing the COVID-19 Vaccines: How Are They Different?” Yale Medicine, Yale Medicine, 20 July 2022, https://www.yalemedicine.org/news/covid-19-vaccine-comparison. . Taylor, Jordan E. “The U.S. Had ‘Vaccine Passports’ Long before COVID-19.” Time, Time, 5 Apr. 2021, https://time.com/5952532/vaccine-passport-history/. .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/08/28/english.html",
            "relUrl": "/misc/2022/08/28/english.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Why you should use Svelte instead of React?",
            "content": "State management system . Svelte is a Web Framework which provides an easy to use state management system without the drawbacks of a slow virtual DOM (unlike React and Vue). Additionally, it is very similar to normal HTML/CSS/JS, which means it has less of a learning curve. Svelte uses the .svelte file extension for its files, which are really similar to normal HTML files. If you want to export a javascript variable to your HTML, just export it in a script tag. You can then access it in your HTML by enclosing the variable in curly brackets . &lt;script&gt; export let awesome_var = &quot;Svelte is cool!&quot;; &lt;/script&gt; &lt;h1&gt;{ awesome_var }&lt;/h1&gt; . When you change the variable, your HTML will automatically be updated. No need for unnecessary calls such as setState in React . &lt;script&gt; export let awesome_var = &quot;Svelte is cool!&quot;; function editVar () { awesome_var = &quot;Svelte is really cool!&quot; } &lt;/script&gt; &lt;h1&gt;{ awesome_var }&lt;/h1&gt; &lt;button on:click={editVar}&gt;Make Svelte really cool&lt;/button&gt; . When you press the button, the h1 will automatically update with the new text. In addition, you might have noticed that instead of onclick, I used on:click, which is the way Svelte handles events. . . Slots . Another feature that svelte provides is slots, which makes it super easy to use and create custom components. Essentially, I can template my component, and then have the consumer of the component fill in the HTML for some of the parts. For instance, let’s say I’m creating a layout component, which has 3 divs. We can then create slots, which would allow the user of the component to specify what to put in those divs. This is what I would put in CustomComponent.svelte. . &lt;!-- These divs could be styled by the component creator --&gt; &lt;div&gt; &lt;slot name=&quot;div1&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;slot name=&quot;div2&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;slot name=&quot;div3&quot;&gt; &lt;/div&gt; . Now, in my app component, I can use this CustomComponent I created by importing it. I can then easily specify what to put in the slots. . &lt;script&gt; //import CustomComponent import CustomComponent from &quot;./CustomComponent.svelte&quot; &lt;/script&gt; &lt;CustomComponent&gt; &lt;span slot=&quot;div1&quot;&gt;This is the text I want in div1&lt;/span&gt; &lt;span slot=&quot;div2&quot;&gt;This is the text I want in div2&lt;/span&gt; &lt;span slot=&quot;div3&quot;&gt;This is the text I want in div3&lt;/span&gt; &lt;/CustomComponent&gt; . CSS . Additionally, CSS is exactly the same as you would do with a normal HTML file, you would just add a style tag. For instance, here I make all the spans have a background color of red. . &lt;style&gt; span { background-color: red; } &lt;/style&gt; . One thing to note about styles with svelte is that they are shallow. This means if I had some spans in my CustomComponent, the styles I specify in my App component would not apply to those spans. . Overall, with all these features, it is clear that you should use Svelte as your go-to web framework. .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/web/2022/08/28/comparison-post.html",
            "relUrl": "/web/2022/08/28/comparison-post.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Bash Installer/Checker",
            "content": "Bash CSA Installer . This program checks for all installations necessary for CSA and installs them if necessary. Also checks for program versions and upgrades if old versions cause issues (ie. java) and clones/updates the APCSA repository. . In this script I used many key features of bash which helped me learn a lot about it: . If statements: These were necessary to simply check if things were installed | Checking for files and directories: I used this in conjunction with if statements to determine if both repositories &amp; programs were installed | Git Command Line Interface: In order to use git in my script, I had to use the Git Command Line Interface to update and clone the repository | Putting command output to files: Primarily I did not want to clog the output so I put the output from commands I was running into /dev/null | Piping from one command to another: A lot of times I had to parse/check the output from a specific command so I had to pipe it to the grep or awk commands | Variables: Storing data such as version numbers were useful to keep in variables | Running commands in Bash Scripts: In order to conduct installs in the case that packages weren&#39;t installed, I had to run commands inside my bash script, and I also sometimes had to put results from commands into variables | echo &quot;Welcome to CSA Installer. Note that installations may require sudo permissions &amp; password to be entered&quot; # make sure in home directory of user cd ~ # check anaconda installation if command -v anaconda &gt;/dev/null; then anaconda_version=`conda --version | awk -F &quot; &quot; &#39;{print $2}&#39;` echo &quot;Anaconda installed (Version $anaconda_version)&quot; else echo &quot;Installing Anaconda&quot; wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh ./Anaconda3-2022.05-Linux-x86_64.sh fi # check python 3 installation if python3 --version | grep &quot;Python 3&quot; &gt;/dev/null; then python3_version=`python3 --version | awk -F &quot; &quot; &#39;{print $2}&#39;` echo &quot;Python $python3_version installed&quot; else echo &quot;Installing Python 3&quot; sudo apt install python3 python3-pip fi # check python 2 installation if python2 --version 2&gt;&amp;1 | grep &quot;Python 2&quot; &gt;/dev/null; then python2_version=`python2 --version 2&gt;&amp;1 | awk -F &quot; &quot; &#39;{print $2}&#39;` echo &quot;Python $python2_version installed&quot; else echo &quot;Installing Python 2&quot; sudo apt install python2 fi #check java installation and java version java_version=`java --version | head -n 1 | awk -F &quot; &quot; &#39;{print $2}&#39; | awk -F &quot;.&quot; &#39;{print $1}&#39;` if [[ $java_version -ge 11 ]]; then echo &quot;Java installed with Version 11 or Better (Version $java_version)&quot; else echo &quot;Installing Java Version 11 (Version too low or Java not installed)&quot; sudo add-apt-repository ppa:openjdk-r/ppa sudo apt update sudo apt install openjdk-11-jdk fi #check jupyter installation if [[ -f ~/anaconda3/bin/jupyter ]]; then jupyter_version=`jupyter --version | grep jupyter_core | awk -F &quot;: &quot; &#39;{print $2}&#39;` echo &quot;Jupyter installed (Version $jupyter_version)&quot; else echo &quot;Installing jupyter&quot; ~/anaconda3/bin/conda install jupyter fi #check bash kernel installation if ~/anaconda3/bin/jupyter kernelspec list | grep bash &gt;/dev/null; then echo &quot;Bash Kernel Installed&quot; else echo &quot;Installing Bash Kernel&quot; pip3 install bash_kernel python3 -m bash_kernel.install fi #check java kernel installation if ~/anaconda3/bin/jupyter kernelspec list | grep java &gt;/dev/null; then echo &quot;Java Kernel Installed&quot; else echo &quot;Installing Java Kernel&quot; wget https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip unzip ijava-1.3.0.zip python3 install.py --user fi #create vscode directory if necessary if [[ ! -d ~/vscode ]]; then echo &quot;Creating vscode directory&quot; mkdir vscode fi #clone APCSA repository if necessary if [[ ! -d ~/vscode/APCSA ]]; then echo &quot;Cloning APCSA repository&quot; cd vscode git clone https://github.com/nighthawkcoders/APCSA 2&gt;/dev/null cd .. fi #update APCSA repository echo &quot;Updating APCSA repository&quot; cd vscode/APCSA git pull 2&gt;/dev/null cd ../.. . Welcome to CSA Installer. Note that installations may require sudo permissions &amp; password to be entered Anaconda installed (Version 4.13.0) Python 3.9.12 installed Python 2.7.12 installed Java installed with Version 11 or Better (Version 11) Jupyter installed (Version 4.9.2) Bash Kernel Installed Java Kernel Installed Updating APCSA repository Updating 2e5c105..5e8fdb9 Fast-forward .../2022-08-22-TT110-anthony_and_sahil.ipynb | 23 +++++++++-- _pages/00_schedule.md | 42 ++++++++++++ _posts/2022-06-01-AR100-bitcoin_numbers.md | 34 +++++++++++++++++ _posts/2022-08-29-PT120-using_objects.md | 21 ++++++-- _posts/2022-08-29-TR120-team_innovation.md | 13 +++- _posts/2022-09-05-PT130-free_response.md | 38 +++++++++++++++++++ images/bitcoin.png | Bin 0 -&gt; 4303 bytes 7 files changed, 132 insertions(+), 39 deletions(-) create mode 100644 _posts/2022-06-01-AR100-bitcoin_numbers.md create mode 100644 _posts/2022-09-05-PT130-free_response.md create mode 100644 images/bitcoin.png .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/2022/08/26/bash.html",
            "relUrl": "/pbl/2022/08/26/bash.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Primitives Jupyter Notebook",
            "content": "Class with primitives &amp; wrapper classes . This class representing a Human that uses primitive and wrapper-class types . public class Human { private double heightIn; //a height can be a decimal private String name; //name is a sequence of words private int age; //is a whole nummber private boolean hasPets; //can either be true or false public Human (String name) { this.name = name; } public double getHeight () { return this.heightIn; } public void setHeight (double height) { this.heightIn = height; } public String getName () { return this.name; } public int getAge () { return this.age; } public void setAge (int age) { this.age = age; } public boolean getHasPets () { return this.hasPets; } public void setHasPets (boolean hasPets) { this.hasPets = hasPets; } public String getDetails () { return this.getName() + &quot; is &quot; + this.getAge() + &quot; years old and is &quot; + this.getHeight() + &quot; in tall and &quot; + (this.getHasPets() ? &quot;does&quot; : &quot;doesn&#39;t&quot;) + &quot; have pets.&quot;; } public static void main(String[] args) { Scanner sc = new Scanner(System.in); String name; double height; int age; boolean hasPets; //input name w/ error handling try { System.out.println(&quot;What is the name of the human?&quot;); name = sc.next(); } catch (InputMismatchException e) { System.out.println(&quot;Inputted name is not a string&quot;); return; } //input height w/ error handling try { System.out.println(&quot;What is the height of the human (in inches)?&quot;); height = sc.nextDouble(); } catch (InputMismatchException e) { System.out.println(&quot;Inputted height is not a double&quot;); return; } //input age w/ error handling try { System.out.println(&quot;What is the age of the human?&quot;); age = sc.nextInt(); } catch (InputMismatchException e) { System.out.println(&quot;Inputted age is not an integer&quot;); return; } //input hasPets w/ error handling try { System.out.println(&quot;Does the human have pets (true/false)?&quot;); hasPets = sc.nextBoolean(); } catch (InputMismatchException e) { System.out.println(&quot;Inputted value is not a boolean (true/false)&quot;); return; } //create human Human rohan = new Human(name); rohan.setHeight(height); rohan.setAge(age); rohan.setHasPets(hasPets); System.out.println(rohan.getDetails()); } } . Now we can test the code using the Human::main method . Human.main(null); . What is the name of the human? What is the height of the human (in inches)? What is the age of the human? Does the human have pets (true/false)? Rohan is 16 years old and is 67.25 in tall and doesn&#39;t have pets. . Casting w/ Arithmetic Operations . Here Examples are shown how casting can affect the results of arithmetic operations . public class ArithmeticOps { public static void main (String[] args) { System.out.println(&quot;Integer Division Calculator&quot;); Scanner sc = new Scanner(System.in); int a, b; try { System.out.println(&quot;Enter value for a&quot;); a = sc.nextInt(); System.out.println(&quot;Enter value for b&quot;); b = sc.nextInt(); } catch (InputMismatchException e) { System.out.println(&quot;Input was not an integers&quot;); return; } int integerDivision = a/b; //this will round down due to integer division double doubleDivision = ((double)a)/((double)b); //a and b are converted to doubles before division giving exact results System.out.println(&quot;a is &quot; + a + &quot; and b is &quot; + b); System.out.println(&quot;Integer Division Result &quot; + integerDivision); System.out.println(&quot;Double Division Result &quot; + doubleDivision); //note that the result for this may be slightly inaccurate due to base-2 to base-10 conversion } } . ArithmeticOps.main(null); . Integer Division Calculator Enter value for a Enter value for b a is 7 and b is 4 Integer Division Result 1 Double Division Result 1.75 . Compound Assignment Operators . Here I demo the use of compound operators . public class CompoundOps { public static void main (String[] args) { Scanner sc = new Scanner(System.in); try { System.out.println(&quot;Enter first number: &quot;); double a = sc.nextDouble(); System.out.println(&quot;The number is now &quot; + a); System.out.println(&quot;Increase number by: &quot;); a += sc.nextDouble(); System.out.println(&quot;The number is now &quot; + a); System.out.println(&quot;Decrease number by: &quot;); a -= sc.nextDouble(); System.out.println(&quot;The number is now &quot; + a); System.out.println(&quot;Multiply number by: &quot;); a *= sc.nextDouble(); System.out.println(&quot;The number is now &quot; + a); System.out.println(&quot;Divide number by: &quot;); a /= sc.nextDouble(); System.out.println(&quot;The number is now &quot; + a); } catch (InputMismatchException e) { System.out.println(&quot;Input was invalid&quot;); } } } . CompoundOps.main(null); . Enter first number: The number is now 10.0 Increase number by: The number is now 30.0 Decrease number by: The number is now -10.0 Multiply number by: The number is now -60.0 Divide number by: The number is now -6.666666666666667 . GPA Calculator . This GPA Calculator takes in your grades as in input and outputs different types of GPA. . //stats for a Grade (A,B,C NOT 9th,10th,11th) public class GradeStats { private int total_count; // -- int because whole number private int total_count_ap; // int because whole number private int uc_count; //UC count only includes sophmore/junior years -- int because whole number private int uc_count_ap; //UC count only includes sophmore/junior years -- int because whole number private double ap_gpa; //gpa for AP Classes (ie. 4.0, 3.0, etc.) -- double because it can have decimals private double normal_gpa; //gpa for Normal Classes (ie. 5.0, 4.0, etc.) -- double because it can have decimals private String grade; //A, B, C, etc. -- string because it is characters public GradeStats (String grade, double ap_gpa, double normal_gpa) { this.grade = grade; this.ap_gpa = ap_gpa; this.normal_gpa = normal_gpa; } public void setTotalCount (int total_count) { this.total_count = total_count; } public int getTotalCount () { return this.total_count; } public void setTotalCountAP (int total_count_ap) { this.total_count_ap = total_count_ap; } public int getTotalCountAP () { return this.total_count_ap; } public void setUCCount (int uc_count) { this.uc_count = uc_count; } public int getUCCount () { return this.uc_count; } public void setUCCountAP (int uc_count_ap) { this.uc_count_ap = uc_count_ap; } public int getUCCountAP () { return this.uc_count_ap; } public String getGrade () { return this.grade; } public double getAPGPA () { return this.ap_gpa; } public double getNormalGPA () { return this.normal_gpa; } } . public class GPACalculator { GradeStats[] gradeStats = { new GradeStats(&quot;A&quot;, 5.0, 4.0), new GradeStats(&quot;B&quot;, 4.0, 3.0), new GradeStats(&quot;C&quot;, 3.0, 2.0), new GradeStats(&quot;D&quot;, 2.0, 1.0), new GradeStats(&quot;F&quot;, 1.0, 0.0) }; // gets input from the scanner public GPACalculator (Scanner sc) throws InputMismatchException { for (int i = 0; i&lt;5; i++) { GradeStats curGradeStats = gradeStats[i]; System.out.print(&quot;How many total &quot; + curGradeStats.getGrade() + &quot;s do you have? &quot;); curGradeStats.setTotalCount(sc.nextInt()); System.out.println(curGradeStats.getTotalCount()); System.out.print(&quot;How many total (AP) &quot; + curGradeStats.getGrade() + &quot;s do you have? &quot;); curGradeStats.setTotalCountAP(sc.nextInt()); System.out.println(curGradeStats.getTotalCountAP()); System.out.print(&quot;How many sophmore/junior &quot; + curGradeStats.getGrade() + &quot;s do you have? &quot;); curGradeStats.setUCCount(sc.nextInt()); System.out.println(curGradeStats.getUCCount()); System.out.print(&quot;How many sophmore/junior (AP) &quot; + curGradeStats.getGrade() + &quot;s do you have? &quot;); curGradeStats.setUCCountAP(sc.nextInt()); System.out.println(curGradeStats.getUCCountAP()); } } public double getUnweighted () { double total = 0; double count = 0; for (int i = 0; i&lt;5; i++) { GradeStats curGradeStats = gradeStats[i]; count += curGradeStats.getTotalCount(); total += curGradeStats.getTotalCount() * curGradeStats.getNormalGPA(); } return count != 0.0 ? total/count : 0.0; } public double getWeighted () { double total = 0; double count = 0; for (int i = 0; i&lt;5; i++) { GradeStats curGradeStats = gradeStats[i]; count += curGradeStats.getTotalCount(); int normalCount = curGradeStats.getTotalCount() - curGradeStats.getTotalCountAP(); total += normalCount * curGradeStats.getNormalGPA() + curGradeStats.getTotalCountAP() * curGradeStats.getAPGPA(); } return count != 0.0 ? total/count : 0.0; } public double getUnweightedUC () { double total = 0; double count = 0; for (int i = 0; i&lt;5; i++) { GradeStats curGradeStats = gradeStats[i]; count += curGradeStats.getUCCount(); total += curGradeStats.getUCCount() * curGradeStats.getNormalGPA(); } return count != 0.0 ? total/count : 0.0; } public double getWeightedUC () { double total = 0; double count = 0; int ap_count = 0; //limited to 8 AP trimesters for (int i = 0; i&lt;5; i++) { GradeStats curGradeStats = gradeStats[i]; count += curGradeStats.getUCCount(); if (ap_count &gt; 8) { total += curGradeStats.getUCCount() * curGradeStats.getNormalGPA(); continue; } ap_count += curGradeStats.getUCCountAP(); if (ap_count &gt; 8) { int normalAPs = curGradeStats.getUCCountAP() - ap_count; int normalCount = curGradeStats.getUCCount() - curGradeStats.getUCCountAP() + normalAPs; total += normalCount * curGradeStats.getNormalGPA() + (curGradeStats.getUCCountAP() - normalAPs) * curGradeStats.getAPGPA(); } else { int normalCount = curGradeStats.getUCCount() - curGradeStats.getUCCountAP(); total += normalCount * curGradeStats.getNormalGPA() + curGradeStats.getUCCountAP() * curGradeStats.getAPGPA(); } } return count != 0.0 ? total/count : 0.0; } //runs GPA Calculator class public static void main (String[] args) { try { Scanner sc = new Scanner(System.in); GPACalculator gpaCalc = new GPACalculator(sc); System.out.println(&quot;Unweighted GPA: &quot; + gpaCalc.getUnweighted()); System.out.println(&quot;Weighted GPA: &quot; + gpaCalc.getWeighted()); System.out.println(&quot;Unweighted GPA (UC): &quot; + gpaCalc.getUnweightedUC()); System.out.println(&quot;Weighted GPA (UC): &quot; + gpaCalc.getWeightedUC()); } catch (InputMismatchException e) { System.out.println(&quot;Bad Input (all input should be integers)!&quot;); } } } . GPACalculator.main(null); . How many total As do you have? 29 How many total (AP) As do you have? 8 How many sophmore/junior As do you have? 14 How many sophmore/junior (AP) As do you have? 6 How many total Bs do you have? 0 How many total (AP) Bs do you have? 0 How many sophmore/junior Bs do you have? 0 How many sophmore/junior (AP) Bs do you have? 0 How many total Cs do you have? 0 How many total (AP) Cs do you have? 0 How many sophmore/junior Cs do you have? 0 How many sophmore/junior (AP) Cs do you have? 0 How many total Ds do you have? 0 How many total (AP) Ds do you have? 0 How many sophmore/junior Ds do you have? 0 How many sophmore/junior (AP) Ds do you have? 0 How many total Fs do you have? 0 How many total (AP) Fs do you have? 0 How many sophmore/junior Fs do you have? 0 How many sophmore/junior (AP) Fs do you have? 0 Unweighted GPA: 4.0 Weighted GPA: 4.275862068965517 Unweighted GPA (UC): 4.0 Weighted GPA (UC): 4.428571428571429 .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/pbl/2022/08/22/primitives.html",
            "relUrl": "/cb/pbl/2022/08/22/primitives.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Python Jupyter Notebook",
            "content": "print(&#39;hello&#39;) . hello .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/setup/2022/08/19/python.html",
            "relUrl": "/setup/2022/08/19/python.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "A cool post",
            "content": "This is a very great post . Why is this post great? . This post has a java code sample 😲 . public class Test { public static void main (String[] args) { System.out.println(&quot;sheeeeeeesh&quot;); } } .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/setup/2022/08/19/markdown-post.html",
            "relUrl": "/setup/2022/08/19/markdown-post.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Java Jupyter Notebook",
            "content": "//imports import java.time.*; . //Class can print a value with current date public class Printer { private String value; //takes in value to print public Printer (String value) { this.value = value; } //prints the value &amp; date info from java.time public void print() { //get current date in YYYY-MM-DD format String currentDate = LocalDate.now().toString(); //print value &amp; currentdate System.out.println(&quot;[&quot; + currentDate + &quot;]: &quot; + value); } //tests the class by printing hello and hello world public static void main (String[] args) { //this printer prints hello Printer helloPrinter = new Printer(&quot;hello&quot;); helloPrinter.print(); //this printer prints hello world Printer helloWorldPrinter = new Printer(&quot;hello world&quot;); helloWorldPrinter.print(); } } . // use main method from Printer Printer.main(null); /* expected output (ran on 8/20/2022): * [2022-08-20]: hello * [2022-08-20]: hello world */ . [2022-08-20]: hello [2022-08-20]: hello world .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/08/19/java.html",
            "relUrl": "/cb/2022/08/19/java.html",
            "date": " • Aug 19, 2022"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "Vocab",
          "content": "Here I will keep some important CS Vocab . Primitives: A type of data in Java which is basic and does not have any properties/methods (ie int, boolean, double) | Wrapper Classes: Classes that allow primitives to be used in places where only classes are allowed such as generics (ie. Integer, Boolean, Double, String) | Static vs Dynamic Methods: Static methods are simply called on the class while dynamic methods are called on an INSTANCE of the class (an object) | Constructors: These are special methods that are called when an object of a class is created. | . Collegeboard Posts . 2023 AP Test FRQs . cb . 2023 AP Test FRQs . May 9, 2023 . | College Board FRQs . cb . Apr 25, 2023 . | Arrays and 2D Arrays . cb . Apr 18, 2023 . | Binary Search . cb . Binary Search Hacks . Apr 18, 2023 . | Merge Sort . cb . Merge Sort Hacks . Apr 18, 2023 . | | Data Types Hacks . cb . Hacks for the data types lesson . Mar 6, 2023 . | AP CSA 66 Question MC . cb . A reflection on my 66 question mc . Jan 26, 2023 . | AP CSA 55 Question MC . cb . A reflection on my 55 question mc . Jan 20, 2023 . | Units 6-10 Jupyter Notebook . cb . Notes and code on units 6-10 . Dec 13, 2022 . | | Units 1-5 Jupyter Notebooks . cb . Notes and code on units 1-5 . Nov 28, 2022 . | AP Calendar . cb . Parts a/b from 2019 FRQ . Nov 14, 2022 . | AP CSA Tri 1 Final . cb . A reflection on my Tri 1 AP CSA MC Final . Nov 4, 2022 . | Unit 6 Homework . cb . Unit 6 Homework . Oct 30, 2022 . | | | | | Fibonacci . cb . This shows mutliple ways of doing fibonacci using inheritance . Sep 22, 2022 . | | CollegeBoard FRQ . cb . This shows an FRQ for Collegeboard focused on iteration and arrays . Sep 16, 2022 . | | | | If Statements/Boolean Lesson . cb . This is an interactive lesson with jupyter notebooks teaching if statements and boolean expressions . Sep 7, 2022 . | Week 2 AP CSA . pbl . cb . A description of what I did Week 1 . Sep 5, 2022 . | Cricket Scores GUI . pbl . cb . This app provides a GUI for checking cricket scores using objects . Sep 1, 2022 . | | Physics Graph . pbl . cb . This code provides a visualization for my physics data . Aug 29, 2022 . | | Week 1 AP CSA . pbl . cb . A description of what I did Week 1 . Aug 28, 2022 . | | | | Primitives Jupyter Notebook . cb . pbl . about primitives . Aug 22, 2022 . | | | Java Jupyter Notebook . cb . Prints hello using a printer class . Aug 19, 2022 . | .",
          "url": "https://rjawesome.github.io/apcsa_fastpages/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "Hi, I’m a high school student who loves Programming, Robotics, and CyberSecurity. Check out my app “Hangman Ad Free” on the Play Store. .",
          "url": "https://rjawesome.github.io/apcsa_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Todo",
          "content": "Todo List . .",
          "url": "https://rjawesome.github.io/apcsa_fastpages/todo/",
          "relUrl": "/todo/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Mean",
          "content": "Add new Mean: .",
          "url": "https://rjawesome.github.io/apcsa_fastpages/mean/",
          "relUrl": "/mean/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rjawesome.github.io/apcsa_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}