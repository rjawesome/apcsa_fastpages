{
  
    
        "post0": {
            "title": "CollegeBoard FRQ",
            "content": "This question involves reasoning about one-dimensional and two-dimensional arrays of integers. You will write three static methods, all of which are in a single enclosing class, named DiverseArray (not shown). The first method returns the sum of the values of a one-dimensional array; the second method returns an array that represents the sums of the rows of a two-dimensional array; and the third method analyzes row sums. . In part (a), the instructions are to Write a static method arraySum that calculates and returns the sum of the entries in a specified one-dimensional array. . public static int arraySum (int[] arr1) { int sum = 0; for (int i = 0; i&lt;arr1.length; i++) { sum += arr1[i]; } return sum; } . Here we can test the method with the example array which is [1, 3, 2, 7, 3], which should have a sum of 16. . int[] arrayTest = {1, 3, 2, 7, 3}; System.out.println(arraySum(arrayTest)); . 16 . Part (b) asks to Write a static method rowSums that calculates the sums of each of the rows in a given two dimensional array and returns these sums in a one-dimensional array. The method has one parameter, a two dimensional array arr2D of int values. The array is in row-major order: arr2D[r][c] is the entry at row r and column c. The method returns a one-dimensional array with one entry for each row of arr2D such that each entry is the sum of the corresponding row in arr2D. . public static int[] rowSums(int[][] arr2D) { int[] sums = new int[arr2D.length]; //elements initialize to 0 for (int i = 0; i &lt; arr2D.length; i++) { for (int j = 0; j &lt; arr2D[i].length; j++) { sums[i] += arr2D[i][j]; } } return sums; } . Now we can test with the example: 1&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;3 10&nbsp;&nbsp;10&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;2 5&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;6 7&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;1 . The expected output here is {16, 32, 28, 20}. . int[][] arrayTest2D = { {1, 3, 2, 7, 3}, {10, 10, 4, 6, 2}, {5, 3, 5, 9, 6}, {7, 6, 4, 2, 1} }; int[] sums = rowSums(arrayTest2D); for (int i = 0; i&lt;sums.length; i++) { System.out.println(sums[i]); } . 16 32 28 20 . Part (c) asks us to Write a static method isDiverse that determines whether or not a given two-dimensional array is diverse. The method has one parameter: a two-dimensional array arr2D of int values. The method should return true if all the row sums in the given array are unique; otherwise, it should return false . public static boolean isDiverse (int[][] arr2D) { int[] sums = rowSums(arr2D); for (int i = 0; i &lt; sums.length; i++) { for (int j = i + 1; j &lt; sums.length; j++) { if (sums[i] == sums[j]) return false; // returns false if two elements are the same } } //if end is reached all elements have passed uniqueness test return true; } . We can test with the two provided examples which are diverse and not diverse. . This example is diverse: 1&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;3 10&nbsp;&nbsp;10&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;2 5&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;6 7&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;1 . This example is not diverse: 1&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;4 12&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;9 8&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;10&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;5 3&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;6 . int[][] arrayTestDiverse = { {1, 3, 2, 7, 3}, {10, 10, 4, 6, 2}, {5, 3, 5, 9, 6}, {7, 6, 4, 2, 1} }; int[][] arrayTestNotDiverse = { {1, 1, 5, 3, 4}, {12, 7, 6, 1, 9}, {8, 11, 10, 2, 5}, {3, 2, 3, 0, 6} }; System.out.println(isDiverse(arrayTestDiverse)); System.out.println(isDiverse(arrayTestNotDiverse)); . true false .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/09/16/cb-frq.html",
            "relUrl": "/cb/2022/09/16/cb-frq.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Iteration Rhyme Example",
            "content": "Here, I am using an example of deer getting hunted by tigers using iteration. Unlike the example from Mr. M I changed the for loops so the deer would print horizontally instead of vertically making it more compact. . import java.util.*; . public class DeerTiger { String[][] deers = { { &quot;( ) &quot;, &quot; `--(_ _)--&#39; &quot;, &quot; Y-Y &quot;, &quot; /@@ &quot;, &quot; / &quot;, &quot; `--&#39;. , &quot;, &quot; | `.__________/) &quot;, &quot; &quot;, &quot; &quot; }, { &quot; |/ |/ &quot;, &quot; / &quot;, &quot; _/ ___ ___ &quot;, &quot; o o-&#39; &#39;&#39;&#39; &#39; &quot;, &quot; O -. | &quot;, &quot; | |&#39;&#39;&#39;| | &quot;, &quot; || | | &quot;, &quot; || || &quot;, &quot; &quot; &quot; &quot; }, { &quot; { } &quot;, &quot; {^^, &quot;, &quot; ( `-; &quot;, &quot; _ `;;~~ &quot;, &quot; /(______); &quot;, &quot; ( ( &quot;, &quot; |:( ) &quot;, &quot; _// &quot;, &quot;/ / vv &quot; }, { &quot; ()&quot;, &quot; )) ((&quot;, &quot; // &quot;, &quot; | ____// |&quot;, &quot; ~/ ~ ~ /~~/&quot;, &quot; (| _/o ~~&quot;, &quot; / / ,|&quot;, &quot; (~~~)__.- |&quot;, &quot; ``~~ | |&quot;, &quot; | | |&quot; } }; String[] tiger = { &quot; __,,,,_&quot;, &quot; _ __..-;&#39;&#39;`--/&#39;/ /.&#39;,-`-.&quot;, &quot; /&#39;` | | | // // / -.,/_,&#39;-,&quot;, &quot; /&lt;7&#39; ; | ; ||/ /| | / |`-/,/-.,_,/&#39;)&quot;, &quot; / _.-, `,- ,__| _-| / /|_/ | &#39;-/.;. &#39;&quot;, &quot; `-` f/ ; / __/ __ `/ |__/ |&quot;, &quot; `-&#39; | -| =| _ |-&#39; |&quot;, &quot; __/ /_..-&#39; ` ),&#39; //&quot;, &quot; fL ((__.-&#39;((___..-&#39;&#39; __.&#39;&quot; }; public void printRhyme () { for (int count = 4; count &gt;= 1; count--) { System.out.println(&quot;Here comes &quot; + count + &quot; deer n&quot;); for (int i = 0; i&lt;deers[0].length; i++) { for (int j = 0; j&lt;count; j++) { System.out.print(deers[j][i] + &quot; &quot;); } System.out.println(); } System.out.println(&quot;Then the tiger arrives&quot;); for (int i = 0; i&lt;tiger.length; i++) { System.out.println(tiger[i]); } System.out.println(); System.out.println(&quot;Now there are &quot; + (count-1) + &quot; deer n&quot;); } } } . DeerTiger myRhyme = new DeerTiger(); myRhyme.printRhyme(); . Here comes 4 deer ( ) |/ |/ { } () `--(_ _)--&#39; / {^^, )) (( Y-Y _/ ___ ___ ( `-; // /@@ o o-&#39; &#39;&#39;&#39; &#39; _ `;;~~ | ____// | / O -. | /(______); ~/ ~ ~ /~~/ `--&#39;. , | |&#39;&#39;&#39;| | ( ( (| _/o ~~ | `.__________/) || | | |:( ) / / ,| || || _// (~~~)__.- | &#34; &#34; / / vv ``~~ | | Then the tiger arrives __,,,,_ _ __..-;&#39;&#39;`--/&#39;/ /.&#39;,-`-. /&#39;` | | | // // / -.,/_,&#39;-, /&lt;7&#39; ; | ; ||/ /| | / |`-/,/-.,_,/&#39;) / _.-, `,- ,__| _-| / /|_/ | &#39;-/.;. &#39; `-` f/ ; / __/ __ `/ |__/ | `-&#39; | -| =| _ |-&#39; | __/ /_..-&#39; ` ),&#39; // fL ((__.-&#39;((___..-&#39;&#39; __.&#39; Now there are 3 deer Here comes 3 deer ( ) |/ |/ { } `--(_ _)--&#39; / {^^, Y-Y _/ ___ ___ ( `-; /@@ o o-&#39; &#39;&#39;&#39; &#39; _ `;;~~ / O -. | /(______); `--&#39;. , | |&#39;&#39;&#39;| | ( ( | `.__________/) || | | |:( ) || || _// &#34; &#34; / / vv Then the tiger arrives __,,,,_ _ __..-;&#39;&#39;`--/&#39;/ /.&#39;,-`-. /&#39;` | | | // // / -.,/_,&#39;-, /&lt;7&#39; ; | ; ||/ /| | / |`-/,/-.,_,/&#39;) / _.-, `,- ,__| _-| / /|_/ | &#39;-/.;. &#39; `-` f/ ; / __/ __ `/ |__/ | `-&#39; | -| =| _ |-&#39; | __/ /_..-&#39; ` ),&#39; // fL ((__.-&#39;((___..-&#39;&#39; __.&#39; Now there are 2 deer Here comes 2 deer ( ) |/ |/ `--(_ _)--&#39; / Y-Y _/ ___ ___ /@@ o o-&#39; &#39;&#39;&#39; &#39; / O -. | `--&#39;. , | |&#39;&#39;&#39;| | | `.__________/) || | | || || &#34; &#34; Then the tiger arrives __,,,,_ _ __..-;&#39;&#39;`--/&#39;/ /.&#39;,-`-. /&#39;` | | | // // / -.,/_,&#39;-, /&lt;7&#39; ; | ; ||/ /| | / |`-/,/-.,_,/&#39;) / _.-, `,- ,__| _-| / /|_/ | &#39;-/.;. &#39; `-` f/ ; / __/ __ `/ |__/ | `-&#39; | -| =| _ |-&#39; | __/ /_..-&#39; ` ),&#39; // fL ((__.-&#39;((___..-&#39;&#39; __.&#39; Now there are 1 deer Here comes 1 deer ( ) `--(_ _)--&#39; Y-Y /@@ / `--&#39;. , | `.__________/) Then the tiger arrives __,,,,_ _ __..-;&#39;&#39;`--/&#39;/ /.&#39;,-`-. /&#39;` | | | // // / -.,/_,&#39;-, /&lt;7&#39; ; | ; ||/ /| | / |`-/,/-.,_,/&#39;) / _.-, `,- ,__| _-| / /|_/ | &#39;-/.;. &#39; `-` f/ ; / __/ __ `/ |__/ | `-&#39; | -| =| _ |-&#39; | __/ /_..-&#39; ` ),&#39; // fL ((__.-&#39;((___..-&#39;&#39; __.&#39; Now there are 0 deer .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/2022/09/13/iteration.html",
            "relUrl": "/pbl/2022/09/13/iteration.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 3 AP CSA",
            "content": "If statements lesson . See lesson | . Deployment . See deployed spring website | (EXTRA) Github actions for automatic deployment (will make article soon) | (EXTRA) Simple addition calculator on the springboot website | . Focus / Habits . See self reflection | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/09/10/week-3.html",
            "relUrl": "/misc/2022/09/10/week-3.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Self Reflection",
            "content": "Gratitude . Before I go into this, I would like to reflect on some things I am thankful for: . I am able to have shelter &amp; food which many people in the world do not have | I have an opportunity to go to such a great school | I am able to have a good computer for Computer Science | I have supportive friends in the area | I have time to work on projects and have fun for myself | . Past Projects/Accomplishments . I am a 2x CyberPatriot National Champion | I made an app with over 15000 downloads (Hangman Ad Free on Play Store) | I have had a successful paid internship with Scripps Research under the Su Lab | I have reached the Gold level in USACO (United States Computing Olympiad) | See more at my main website | . Future Goals . Have a successful interest meeting &amp; increase membership in the Algorithmic Problem Solving Club | Advance up to the Platinum level in USACO | Win the CyberPatriot National Finals again | Continue to do good in school | Keep some time to have fun! | . Reflections from Yale Video . We can control our hapiness, it is not just some extrensic factor | Your intituion isn’t always right and recognize that | Make time for social gatherings as we are social animals | Helping others improves your own hapiness | Try to be grateful for what you have (see above) | Being healthy helps a lot to make you more happy | Focus on the present moment rather than worrying about past or future | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/09/10/self-reflection.html",
            "relUrl": "/misc/2022/09/10/self-reflection.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "If Statements/Boolean Lesson",
            "content": "Boolean expressions . Boolean expressions are something that can be TRUE or FALSE . For example, we can check if two things are equal, greater than eachother or less than eachother. Here I have some examples of how these expresisons could be used in a quiz context. Below I have some equality examples . char correctAnswer = &#39;A&#39;; char user1Answer = &#39;B&#39;; char user2Answer = &#39;A&#39;; //Check if user 1&#39;s answer was equal to the correct answeer System.out.println(&quot;Is user 1 right?&quot;); System.out.println(user1Answer == correctAnswer); //Check if user 2&#39;s answer was equal to the correct answer System.out.println(&quot;Is user 2 right?&quot;); System.out.println(user2Answer == correctAnswer); . Is user 1 right? false Is user 2 right? true . We can also compare some values and see if they are greater or less than. . int user1Score = 100; int user2Score = 50; int targetScore = 75; //Check if user 1 reached target score System.out.println(&quot;Did user 1 reach the target score?&quot;); System.out.println(user1Score &gt;= targetScore); //Check if user 2 reached target score System.out.println(&quot;Did user 2 reach the target score?&quot;); System.out.println(user2Score &gt;= targetScore); . Did user 1 reach the target score? true Did user 2 reach the target false . An IF statement utilizes boolean expressions and DOES SOMETHING if the expression is true. For example we can use this on the previos two examples . char correctAnswer = &#39;A&#39;; char user1Answer = &#39;B&#39;; char user2Answer = &#39;A&#39;; //Check if user 1&#39;s answer was equal to the correct answeer if (user1Answer == correctAnswer) { System.out.println(&quot;User 1 is right&quot;); } //Check if user 2&#39;s answer was equal to the correct answer if (user2Answer == correctAnswer) { System.out.println(&quot;User 2 is right&quot;); } . User 2 is right . int user1Score = 100; int user2Score = 50; int targetScore = 75; //Check if user 1 reached target score if (user1Score &gt;= targetScore) { System.out.println(&quot;User 1 reached the target score&quot;); } //Check if user 2 reached target score if (user2Score &gt;= targetScore) { System.out.println(&quot;User 2 reached the target score&quot;); } . User 1 reached the target score . Now, going further what if we wanted to complete some action if the user DID NOT reach the target score. In this case we can use an ELSE statement. . int user1Score = 100; int user2Score = 50; int targetScore = 75; //Check if user 1 reached target score if (user1Score &gt;= targetScore) { System.out.println(&quot;User 1 reached the target score&quot;); } else { System.out.println(&quot;User 1 failed&quot;); } //Check if user 2 reached target score if (user2Score &gt;= targetScore) { System.out.println(&quot;User 2 reached the target score&quot;); } else { System.out.println(&quot;User 2 failed&quot;); } . User 1 reached the target score User 2 failed . Now, let&#39;s say that we want to give the points to answers, but there are different points for each answer choice. This would cause us to chain if logic, which is where we can use an ELSE IF statement. . char user1AnswerChoice = &#39;C&#39;; char user2AnswerChoice = &#39;A&#39;; char reallyCorrectAnswer = &#39;D&#39;; char correctAnswer = &#39;B&#39;; char partiallyCorrectAnswer = &#39;C&#39;; char reallyWrongAnswer = &#39;A&#39;; int user1Points = 0; int user2Points = 0; // process user 1&#39;s answer if (user1AnswerChoice == reallyCorrectAnswer) { // really correct answer is 30 points user1Points += 30; } else if (user1AnswerChoice == correctAnswer) { // correct answer is 20 points user1Points += 20; } else if (user1AnswerChoice == partiallyCorrectAnswer) { // partially correct answer is 10 points user1Points += 10; } else if (user1AnswerChoice == reallyWrongAnswer) { // a really wrong answer loses 10 points user1Points -= 10; } else { // 1 point for trying and not choosing the really wrong answer user1Points += 1; } //process user 2&#39;s answer if (user2AnswerChoice == reallyCorrectAnswer) { // really correct answer is 30 points user2Points += 30; } else if (user2AnswerChoice == correctAnswer) { // correct answer is 20 points user2Points += 20; } else if (user2AnswerChoice == partiallyCorrectAnswer) { // partially correct answer is 10 points user2Points += 10; } else if (user2AnswerChoice == reallyWrongAnswer) { // a really wrong answer loses 10 points user2Points -= 10; } else { // 1 point for trying and not choosing the really wrong answer user2Points += 1; } System.out.println(&quot;User 1 has &quot; + user1Points + &quot; points.&quot;); System.out.println(&quot;User 2 has &quot; + user2Points + &quot; points.&quot;); . User 1 has 10 points. User 2 has -10 points. . In this example, we see a lot of chaining with the if statements. This could be greatly simplified if we used a switch statement, which allows us to select code based on the value of a variable. See the example below the previous code transformed to switch cases. . Note that as shown below, the switch statement cases cannot have variables in them as they must be constant expressions. . char user1AnswerChoice = &#39;C&#39;; char user2AnswerChoice = &#39;A&#39;; int user1Points = 0; int user2Points = 0; // process user 1&#39;s answer switch (user1AnswerChoice) { case &#39;D&#39;: user1Points += 30; break; case &#39;B&#39;: user1Points += 20; break; case &#39;C&#39;: user1Points += 10; break; case &#39;A&#39;: user1Points -= 10; break; default: user1Points += 1; break; } //process user 2&#39;s answer switch (user2AnswerChoice) { case &#39;D&#39;: user2Points += 30; break; case &#39;B&#39;: user2Points += 20; break; case &#39;C&#39;: user2Points += 10; break; case &#39;A&#39;: user2Points -= 10; break; default: user2Points += 1; break; } System.out.println(&quot;User 1 has &quot; + user1Points + &quot; points.&quot;); System.out.println(&quot;User 2 has &quot; + user2Points + &quot; points.&quot;); . User 1 has 10 points. User 2 has -10 points. . Another thing to understand related to this is how to combine conditionals together using AND (&amp;&amp;) and OR (||). They mean what they say, AND returns true if both conditions is true while OR returns true if both or one of the conditions is true. See some examples below. The NOT (!) operator is also useful to flip a boolean value. . char correctAnswer = &#39;E&#39;; char user1Answer = &#39;D&#39;; char user2Answer = &#39;E&#39;; // Using AND operator if (user1Answer == correctAnswer &amp;&amp; user2Answer == correctAnswer) { System.out.println(&quot;Both users got it right&quot;); } // Using OR operator if (user1Answer == correctAnswer || user2Answer == correctAnswer) { System.out.println(&quot;At least one user got it right&quot;); } // Using AND + NOT operator if (!(user1Answer == correctAnswer &amp;&amp; user2Answer == correctAnswer)) { System.out.println(&quot;Both users DID NOT get it right&quot;); } // Using OR operator if (!(user1Answer == correctAnswer || user2Answer == correctAnswer)) { System.out.println(&quot;NEITHER user1 nor user2 got it right&quot;); } . At least one user got it right Both users DID NOT get it right . The final relevant thing to understand for if statements &amp; boolean expressions is De Morgan&#39;s Law. This is an important property that can allow you to switch your if statements with AND and OR. It states that NOT (A AND B) = (NOT A) OR (NOT B) and NOT (A OR B) = (NOT A) AND (NOT B). To illustrate this, I will simplify the last two if statements from the previous example using De Morgan&#39;s Law. . // Using first de morgan&#39;s law (Note the use of the != operator meaning NOT EQUAL TO) if (user1Answer != correctAnswer || user2Answer != correctAnswer) { System.out.println(&quot;Both users DID NOT get it right&quot;); } // Using second de morgan&#39;s law if (user1Answer != correctAnswer &amp;&amp; user2Answer != correctAnswer) { System.out.println(&quot;NEITHER user1 nor user2 got it right&quot;); } . Both users DID NOT get it right . Now we reach the end of this lesson. Here are some &quot;hacks&quot; I recommend you can do to further learn these concepts: . Create a quiz or other application that heavily utilizes if statements | Code a custom application in the spring app using if statements | Try to create a menu from scratch (without looking at Mr. M&#39;s code) as it is a great place to utilize switch cases | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/09/07/if.html",
            "relUrl": "/cb/2022/09/07/if.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Week 2 AP CSA",
            "content": "Using Objects Tech Talk/GUI . Visualization for AP Physics Written in java | Using GUI for displaying Cricket Scores | . Code.org . . The code.org taught me a lot about inheritance having to create the different types of painters | I had to use a lot of debugging in order to get the painter to do what I wanted it to do | I was able to start commenting some of my code with the goals that I want so it is more clear | . Extra Fastpages Hacks . Todo Page | Vocab Page Filters Posts with CB tag | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/cb/2022/09/05/week-2.html",
            "relUrl": "/pbl/cb/2022/09/05/week-2.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Cricket Scores GUI",
            "content": "import java.util.List; . %%loadFromPOM &lt;dependency&gt; &lt;groupId&gt;org.json&lt;/groupId&gt; &lt;artifactId&gt;json&lt;/artifactId&gt; &lt;version&gt;20090211&lt;/version&gt; &lt;/dependency&gt; . The CricketScores class uses static methods in order to pull cricket scores for a specific team . import java.net.http.*; import org.json.*; import java.util.List; public class CricketScores { private static Map&lt;String,String&gt; teamIds = new HashMap&lt;&gt;(); static { teamIds.put(&quot;IND&quot;, &quot;187765&quot;); teamIds.put(&quot;AFG&quot;, &quot;187575&quot;); teamIds.put(&quot;SL&quot;, &quot;187756&quot;); teamIds.put(&quot;PAK&quot;, &quot;187754&quot;); } public static List&lt;String[]&gt; getScores (String team) throws IOException, InterruptedException, JSONException { String teamId = teamIds.get(team); HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://cricketapi10.p.rapidapi.com/api/cricket/team/&quot;+teamId+&quot;/matches/previous/0&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;f58766a4c1msh85336d65179f2c3p15dc2bjsne94dee50a809&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;cricketapi10.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); JSONArray events = (new JSONObject(response.body())).getJSONArray(&quot;events&quot;); List&lt;String[]&gt; ret = new ArrayList&lt;String[]&gt;(); for (int i = events.length()-1; i&gt;Math.max(0, events.length()-5); i--) { JSONObject event = (JSONObject) events.get(i); String awayName = event.getJSONObject(&quot;awayTeam&quot;).getString(&quot;name&quot;); int awayScore = event.getJSONObject(&quot;awayScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;score&quot;); int awayWickets = event.getJSONObject(&quot;awayScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;wickets&quot;); int awayOvers = event.getJSONObject(&quot;awayScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;overs&quot;); String homeName = event.getJSONObject(&quot;homeTeam&quot;).getString(&quot;name&quot;); int homeScore = event.getJSONObject(&quot;homeScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;score&quot;); int homeWickets = event.getJSONObject(&quot;homeScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;wickets&quot;); int homeOvers = event.getJSONObject(&quot;homeScore&quot;).getJSONObject(&quot;innings&quot;).getJSONObject(&quot;inning1&quot;).getInt(&quot;overs&quot;); String[] data = {event.getString(&quot;note&quot;), awayName + &quot;: &quot; + awayScore + &quot;/&quot; + awayWickets + &quot; in &quot; + awayOvers + &quot; overs&quot;, homeName + &quot;: &quot; + homeScore + &quot;/&quot; + homeWickets + &quot; in &quot; + awayOvers + &quot; overs&quot;}; ret.add(data); } return ret; } } . Here, the CricketJFrame is a class which can be instantiated as an object in order to create the Window which provides Cricket Scores for 3 teams (IND, SL, PAK) which can be chosen from the Menu items (Note that there may be an error for kernel crashing as this occurs once the window is closed) . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class CricketJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Team to select a team.&quot;); private JLabel[][] matches = { {new JLabel(&quot;&quot;), new JLabel(&quot;&quot;)}, {new JLabel(&quot;&quot;), new JLabel(&quot;&quot;)}, {new JLabel(&quot;&quot;), new JLabel(&quot;&quot;)}, {new JLabel(&quot;&quot;), new JLabel(&quot;&quot;)} }; public final String[] MENUS = { // 1D Array of Menu Choices &quot;IND&quot;, &quot;SL&quot;, &quot;PAK&quot; }; JPanel labelPanel = new JPanel(); // Constructor enables the Frame instance, the object &quot;this.frame&quot; public CricketJFrame() { // Initializing Key Objects frame = new JFrame(&quot;Cricket Scores&quot;); menubar = new JMenuBar(); menu = new JMenu(&quot;Teams&quot;); // Initialize panel &amp; message labelPanel.setLayout(new BoxLayout(labelPanel, BoxLayout.Y_AXIS)); message.setAlignmentX(Component.CENTER_ALIGNMENT); message.setVisible(false); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); labelPanel.add(message); labelPanel.add(Box.createGlue()); //Adding match JLabels for (JLabel[] lab : matches) { lab[0].setAlignmentX(Component.CENTER_ALIGNMENT); lab[1].setAlignmentX(Component.CENTER_ALIGNMENT); lab[0].setVisible(false); lab[1].setVisible(false); labelPanel.add(lab[0]); labelPanel.add(lab[1]); labelPanel.add(Box.createGlue()); } frame.add(labelPanel); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(400,400); // makes the frame object visible according to properties previously set frame.setVisible(true); } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action // run code based on the menuItem that was selected try { List&lt;String[]&gt; teamData = CricketScores.getScores(selection); message.setText(selection + &quot; Recent Cricket Matches&quot;); message.setVisible(true); for (int i = 0; i&lt;teamData.size(); i++) { System.out.println(i); // matches[i].setText(&quot;&lt;html&gt;&lt;div style=&#39;text-align: center; background: gray;&#39;&gt;&quot; + teamData.get(i)[0] + &quot;&lt;br/&gt;&quot; + teamData.get(i)[1] + &quot;&lt;br/&gt;&quot; + teamData.get(i)[2] + &quot;&lt;/div&gt;&lt;/html&gt;&quot;); // matches[i].setVisible(true); matches[i][0].setText(teamData.get(i)[0]); matches[i][1].setText(teamData.get(i)[1] + &quot; &quot; + teamData.get(i)[2]); matches[i][0].setVisible(true); matches[i][1].setVisible(true); } } catch (Exception ex) { System.err.println(&quot;Error occured&quot;); } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of CricketJFrame class, which makes a JFrame object new CricketJFrame(); } } CricketJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/cb/2022/09/01/cricket.html",
            "relUrl": "/pbl/cb/2022/09/01/cricket.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "GUI with WSL",
            "content": "Guide on how to get GUI on WSL . Download VcXsrv on your windows computer and run the installer (I recommend to add a desktop icon during installation to easily access the application) | In a file explorer open C: Program Files VcXsrv and search for “xlaunch.exe” and open (Alternatively if you set up a desktop icon during installation you can double click on that instead) create a “multiple window display” with “start no client”, and make sure in extra settings to check “Disable access control”, then press next/finish | Open a WSL window and open the ~/.bashrc file in vscode (code ~/.bashrc) or with nano (nano ~/.bashrc), in this file add the following lines export DISPLAY=$(ip route list default | awk &#39;{print $3}&#39;):0 export LIBGL_ALWAYS_INDIRECT=1 . | REOPEN your WSL window, and THEN Run code ~/vscode/[name of apcsa repo] to open a vscode window with your apcsa repo | Run your code, you may need to click the following icon on your taskbar to see the gui | Note: you may need to run xhost +local: &amp; restart VSCode . If you are getting errors about “java.lang.NoClassDefFoundError: Could not initialize class java.awt.GraphicsEnvironment$LocalGE” | See more details | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/08/31/gui.html",
            "relUrl": "/misc/2022/08/31/gui.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Physics Graph",
            "content": "For my AP Physics lab, we had to measure out the speeds of a slow &amp; fast car and then graph them which is shown below, using the XChart library. . import java.util.List; import java.util.stream.Collectors; . %%loadFromPOM &lt;dependency&gt; &lt;groupId&gt;org.knowm.xchart&lt;/groupId&gt; &lt;artifactId&gt;xchart&lt;/artifactId&gt; &lt;version&gt;3.5.2&lt;/version&gt; &lt;/dependency&gt; . %maven org.knowm.xchart:xchart:3.5.2 import org.knowm.xchart.*; . double[] xData = { 0.0, 2.71, 5.61 }; double[] xData2 = { 0.0, 1.4, 2.55 }; double[] yData = { 0.0, 1.0, 2.0 }; double[] yData2 = { 2.0, 1.0, 0.0 }; XYChart chart = new XYChartBuilder().title(&quot;Position vs Time&quot;).xAxisTitle(&quot;Time (s)&quot;).yAxisTitle(&quot;Position (m)&quot;).build(); chart.addSeries(&quot;Slow Car&quot;, xData, yData); chart.addSeries(&quot;Fast Car&quot;, xData2, yData); chart.addSeries(&quot;Reverse Slow Car&quot;, xData, yData2); . org.knowm.xchart.XYSeries@1f5bc85e . BitmapEncoder.getBufferedImage(chart); . BitmapEncoder.getBufferedImage(chart2); .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/cb/2022/08/29/physics-graph.html",
            "relUrl": "/pbl/cb/2022/08/29/physics-graph.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "AP CS Alumni Panel",
            "content": "The Panelists . Colin Szeto: Going to UCSD for mechanical engineering | Antohny Vo: Going to UC Irvine for computer science | Andrew: Going to Mira Costa, hoping to transfer to UCSD | Mabel Szeto: Going to UCSD for aerospace, transfering to cognitive science/machine learning | Allison: Going to UCLA for cognitive science w/ computing | Nitya: Going to UCSD for computer science | . Insights . Try to look at many different options when considering your major and do what you are passionate about | Have perserverance to keep trying in the face of errors and seeing other people that may be better than you | PBL &amp; Working together won’t leave you any time soon so make sure to develop those skills, especially in CS, and figure out strategies to work together | CS is really applicable even in other majors such as using MATLAB software, problem-solving skills, and automating tasks | It is really important to create a resume early as a lot of the interns are hired in September | It is good to work on personal projects to help you learn and stand out a lot | Learning fundemental algorithms such as path finding is really key to CS and real world applications | . Notes . How did you choose your major and how did CS classes help? . colin: I can code pretty well and 3D model even better, look outside of your classmates | anthony: started compsci from a very young age and really liked problem solving and leetcode, hooked from the intro to cs class | andrew: intro to cs allowed him to see the complexity and the theory behind the computer really likes the backends and deployment, reflected on what he wanted to do | mabel: kinda didn’t like his class and CS but knew that it was important to learn, haas been interning at northrop grumman, even aerospace and other majors needs programming, helping w/ mission planning for auto robotics | allison: more of an artsy/business person originally but wants to web design stuff in the future focusing on the UX/UI and knowing what the users want, learned the technical background from the CSP class | nitya: always interested in computer science while she was young, AP CSA helped her to apply the skills to solve the real world problems (covid 19 database) | . What is the biggest challenge you reached with CS? . colin: starting is the hardest part and github errors and keeping the motivation is really important, facing a lot of error messages and there is a solution, googling is really key | anthony: my biggest challenge is clashing egos because comp sci majors are not really kind and are just trying to flex to everyone which is frustrated, focus on your own path rather than everyone else | andrew: the theory behind CS is really hard and is about complicated things that you have to think about now which is a huge transition | mabel: it was hard finding the motivation to do CS, there is someone better than you, having a specific project and purpose helps you a lot, the syntax is frustrating originally | allison: starting is the obvious answer but another answer is the temptation to BS assignments and its important to actually try on the assignments properly, don’t cut corners and don’t focus only on the points, try to go above and beyond | nitya: just getting started in a new area in the computer science and you have to lose structure in computer science and everything is interconnected, you don’t need to have a fully fleshed out plan in the class | . Is there any PBL in College comp sci classes? . colin: one hands on project in freshman and one in senior in UCSD which is way less than what you are using in the CSA class so take advantage of that | andrew: there is PBL and tests which are both pretty equal so it is important to know the PBL and also be ready for the exams, especially in the upper division courses there are less exams and more of the PBL | mabel: first few years is a lot general education with a lot of people per class where the teacher can’t help you one-on-one so study groups are really important where you can use the PBL, some project classes and her friend had a “capstone project” class where they had to spend most of her time managing her group bc they were incompetent, this class is MUCH more structured than college where people can freeload off of you, find the style of working with others that is most efficient for you | . Have you applied CS in your major if you aren’t majoring in CS? . colin: there is a lot of menial tasks that can be really useful to be done using CS and that’s why scripts are really useful in other majors, coding is everywhere, MATLAB is really important for the mechanical statements were you use all the programming concepts | andrew: with high level math the CS can be useful especially with python and the math libraries | mabel: MATLAB and other tools like that and CAD softwares are where you can really use the CS in your major, and 3D printing you could code as well, had to do software in her internship, jupyter notebooks are also being used for technical papers to have the graphs | allison: creating a UX and UI you need to know the front end programming which is used in the cog science, stats courses make the computer science really useful to compute statistical values, programming in R is common for stats, MATLAB stuff even used in psycholo9gy where you wouldn’t even think of it | . For existing college students, have you had a job? . colin: put together a resume because that is important to apply for jobs, talk with teachers and go for the above and beyond and stand out with the teachers, show up to office hours and ask a lot of questions, you could be a teacher’s assistant, CSP python and scripting was really useful for the northrop grumman internship | anthony: this is a great coding school and he works at code ninja where he can teach people to code | mabel: one of the robotics lecturers is a lecturer at UCSD and you can see their research labs and clubs in other to get with the professor and ask if they have any space for you | allison: had an internship last year with a church group in order to design their website and do their branding and stuff | nitya: internship for northrop grumman as a highschool intern, exposed | . Did you focus on personal projects . andrew: balance on what you want to do and what you want to in school, have 2 or 3 personal projects | anthony: something for basketball teams | . How does algorithms help with CS? . andrew: path finding algorithms, freedy, sorting, graph, data vis | colin: a lot of simulations and stuff like in order to convert them into CS | mabel: titan AI is a cool club that does a bunch of robotics stuff, machine learning is cool because it stays in STEM major and it isn’t really CS, enjoyed cognitive science type classes, can pick electives that you want, also applies to the robotics team | . Any advice for internships? . anthony: expos let you make a resume, don’t focus too much on the other people’s linkedin | mabel: know when to apply and companies start hiring in september or november (year before), have a resume done by then, also have some linkedin and proof of what you have done, the SCHOOL doesn’t matter that much, clubs and personal projects really differentiate yourselves, smaller companies take high school interns and find things you are interested in, use parents to your advantage | andrew: build a giant network and the referrals can help you a lot | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/08/29/alumni.html",
            "relUrl": "/misc/2022/08/29/alumni.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Week 1 AP CSA",
            "content": "Code.org Lessons 1-5 (Unit 1) . . Code.org (Unit 2 – extra) . . Hacks from Myconnect . Post for primitives | Bash installation checker post – ALSO installs missing packages | Home page has tags to differentiate collegeboard vs pbl | . Extra fastpages hacks . Vocab page | Extra subject/Word Doc Page | Post with an image | .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/cb/2022/08/28/week-1.html",
            "relUrl": "/pbl/cb/2022/08/28/week-1.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "How vaccination mandates have fared in the past",
            "content": "In his article “The U.S. Has Had ‘Vaccine Passports’ Before—And They Worked,” Jordan Taylor argues that vaccine passports should be used at the current time to promote the COVID-19 vaccination. More specifically, Taylor argues that this has been done successfully before and now it could help us return to normal life. The main argument used in the article is a historical analysis of the use of “vaccine passports” to combat smallpox by forcing people to get vaccines to enter the country, participate in jobs, or go to social gatherings. Taylor also shows the example of travelers to the US needing to provide vaccination proof in the 20th century, even though requirements in other types of documentation were much less stringent than today. As this program succeeded in near eradication of smallpox by the end of the 20th century, Taylor argues that a similar effect is possible with COVID-19 vaccines. The parallel nature of the situation back then and now is further established as the article highlights the similar concerns from the current time period and from back when smallpox vaccines were used. Such complaints included the fact that the smallpox vaccines were “government tyranny,” an argument much present in modern politics. itself as still an argument today. This also furthers the point as others argue that COVID vaccine mandates are taking pre-existing rights but Taylor shows a precedent of vaccine mandates nullifying this argument. Finally, the article also uses the credibility of doctors from the time who highlighted the importance of the smallpox vaccine to further the argument. Overall, this article presents a compelling argument for the use of vaccine passports in the contemporary time. . I agree with Taylor’s stance as I think vaccine passports would help limit the spread of COVID and in the long term could help to eradicate the disease. His basic argument makes sense as it shows the effectiveness of vaccine passports in the smallpox epidemic and highlights how this is similar to the COVID pandemic. This leads to a simple conclusion that vaccine passports would be helpful in combating COVID. I also want to highlight the pertinence of Taylor’s argument relating to vaccination requirements on entry to the United States, as it relates to issues today such as Novak Djokovic being banned from participating in the US Open for refusal of vaccination. All COVID vaccines used in the United States are at least 90% effective at stopping COVID-19 infection according to clinical trials (Katella). Although current vaccines do have some limitations against newer variants such as omicron, new booster shots are being worked on to target these variants which could be included in vaccine passports. The vaccine mandates have yielded decreased rates of infection and deaths at colleges that required vaccines (Acton et al.). This would show that requiring vaccines to do public activities could also decrease the spread of COVID-19 and decrease both deaths and cases. Overall, current evidence clearly supports Taylor’s claim that vaccine passports should be used and hence I agree with Taylor’s stance. . Works Cited . Acton, Riley K, et al. “The Effect of Vaccine Mandates on Disease Spread.” National Bureau of Economic Research, National Bureau of Economic Research, July 2022, https://www.nber.org/system/files/working_papers/w30303/w30303.pdf. . Katella, Kathy. “Comparing the COVID-19 Vaccines: How Are They Different?” Yale Medicine, Yale Medicine, 20 July 2022, https://www.yalemedicine.org/news/covid-19-vaccine-comparison. . Taylor, Jordan E. “The U.S. Had ‘Vaccine Passports’ Long before COVID-19.” Time, Time, 5 Apr. 2021, https://time.com/5952532/vaccine-passport-history/. .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/misc/2022/08/28/english.html",
            "relUrl": "/misc/2022/08/28/english.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Why you should use Svelte instead of React?",
            "content": "State management system . Svelte is a Web Framework which provides an easy to use state management system without the drawbacks of a slow virtual DOM (unlike React and Vue). Additionally, it is very similar to normal HTML/CSS/JS, which means it has less of a learning curve. Svelte uses the .svelte file extension for its files, which are really similar to normal HTML files. If you want to export a javascript variable to your HTML, just export it in a script tag. You can then access it in your HTML by enclosing the variable in curly brackets . &lt;script&gt; export let awesome_var = &quot;Svelte is cool!&quot;; &lt;/script&gt; &lt;h1&gt;{ awesome_var }&lt;/h1&gt; . When you change the variable, your HTML will automatically be updated. No need for unnecessary calls such as setState in React . &lt;script&gt; export let awesome_var = &quot;Svelte is cool!&quot;; function editVar () { awesome_var = &quot;Svelte is really cool!&quot; } &lt;/script&gt; &lt;h1&gt;{ awesome_var }&lt;/h1&gt; &lt;button on:click={editVar}&gt;Make Svelte really cool&lt;/button&gt; . When you press the button, the h1 will automatically update with the new text. In addition, you might have noticed that instead of onclick, I used on:click, which is the way Svelte handles events. . . Slots . Another feature that svelte provides is slots, which makes it super easy to use and create custom components. Essentially, I can template my component, and then have the consumer of the component fill in the HTML for some of the parts. For instance, let’s say I’m creating a layout component, which has 3 divs. We can then create slots, which would allow the user of the component to specify what to put in those divs. This is what I would put in CustomComponent.svelte. . &lt;!-- These divs could be styled by the component creator --&gt; &lt;div&gt; &lt;slot name=&quot;div1&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;slot name=&quot;div2&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;slot name=&quot;div3&quot;&gt; &lt;/div&gt; . Now, in my app component, I can use this CustomComponent I created by importing it. I can then easily specify what to put in the slots. . &lt;script&gt; //import CustomComponent import CustomComponent from &quot;./CustomComponent.svelte&quot; &lt;/script&gt; &lt;CustomComponent&gt; &lt;span slot=&quot;div1&quot;&gt;This is the text I want in div1&lt;/span&gt; &lt;span slot=&quot;div2&quot;&gt;This is the text I want in div2&lt;/span&gt; &lt;span slot=&quot;div3&quot;&gt;This is the text I want in div3&lt;/span&gt; &lt;/CustomComponent&gt; . CSS . Additionally, CSS is exactly the same as you would do with a normal HTML file, you would just add a style tag. For instance, here I make all the spans have a background color of red. . &lt;style&gt; span { background-color: red; } &lt;/style&gt; . One thing to note about styles with svelte is that they are shallow. This means if I had some spans in my CustomComponent, the styles I specify in my App component would not apply to those spans. . Overall, with all these features, it is clear that you should use Svelte as your go-to web framework. .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/web/2022/08/28/comparison-post.html",
            "relUrl": "/web/2022/08/28/comparison-post.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Bash Installer/Checker",
            "content": "Bash CSA Installer . This program checks for all installations necessary for CSA and installs them if necessary. Also checks for program versions and upgrades if old versions cause issues (ie. java) and clones/updates the APCSA repository. . In this script I used many key features of bash which helped me learn a lot about it: . If statements: These were necessary to simply check if things were installed | Checking for files and directories: I used this in conjunction with if statements to determine if both repositories &amp; programs were installed | Git Command Line Interface: In order to use git in my script, I had to use the Git Command Line Interface to update and clone the repository | Putting command output to files: Primarily I did not want to clog the output so I put the output from commands I was running into /dev/null | Piping from one command to another: A lot of times I had to parse/check the output from a specific command so I had to pipe it to the grep or awk commands | Variables: Storing data such as version numbers were useful to keep in variables | Running commands in Bash Scripts: In order to conduct installs in the case that packages weren&#39;t installed, I had to run commands inside my bash script, and I also sometimes had to put results from commands into variables | echo &quot;Welcome to CSA Installer. Note that installations may require sudo permissions &amp; password to be entered&quot; # make sure in home directory of user cd ~ # check anaconda installation if command -v anaconda &gt;/dev/null; then anaconda_version=`conda --version | awk -F &quot; &quot; &#39;{print $2}&#39;` echo &quot;Anaconda installed (Version $anaconda_version)&quot; else echo &quot;Installing Anaconda&quot; wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh ./Anaconda3-2022.05-Linux-x86_64.sh fi # check python 3 installation if python3 --version | grep &quot;Python 3&quot; &gt;/dev/null; then python3_version=`python3 --version | awk -F &quot; &quot; &#39;{print $2}&#39;` echo &quot;Python $python3_version installed&quot; else echo &quot;Installing Python 3&quot; sudo apt install python3 python3-pip fi # check python 2 installation if python2 --version 2&gt;&amp;1 | grep &quot;Python 2&quot; &gt;/dev/null; then python2_version=`python2 --version 2&gt;&amp;1 | awk -F &quot; &quot; &#39;{print $2}&#39;` echo &quot;Python $python2_version installed&quot; else echo &quot;Installing Python 2&quot; sudo apt install python2 fi #check java installation and java version java_version=`java --version | head -n 1 | awk -F &quot; &quot; &#39;{print $2}&#39; | awk -F &quot;.&quot; &#39;{print $1}&#39;` if [[ $java_version -ge 11 ]]; then echo &quot;Java installed with Version 11 or Better (Version $java_version)&quot; else echo &quot;Installing Java Version 11 (Version too low or Java not installed)&quot; sudo add-apt-repository ppa:openjdk-r/ppa sudo apt update sudo apt install openjdk-11-jdk fi #check jupyter installation if [[ -f ~/anaconda3/bin/jupyter ]]; then jupyter_version=`jupyter --version | grep jupyter_core | awk -F &quot;: &quot; &#39;{print $2}&#39;` echo &quot;Jupyter installed (Version $jupyter_version)&quot; else echo &quot;Installing jupyter&quot; ~/anaconda3/bin/conda install jupyter fi #check bash kernel installation if ~/anaconda3/bin/jupyter kernelspec list | grep bash &gt;/dev/null; then echo &quot;Bash Kernel Installed&quot; else echo &quot;Installing Bash Kernel&quot; pip3 install bash_kernel python3 -m bash_kernel.install fi #check java kernel installation if ~/anaconda3/bin/jupyter kernelspec list | grep java &gt;/dev/null; then echo &quot;Java Kernel Installed&quot; else echo &quot;Installing Java Kernel&quot; wget https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip unzip ijava-1.3.0.zip python3 install.py --user fi #create vscode directory if necessary if [[ ! -d ~/vscode ]]; then echo &quot;Creating vscode directory&quot; mkdir vscode fi #clone APCSA repository if necessary if [[ ! -d ~/vscode/APCSA ]]; then echo &quot;Cloning APCSA repository&quot; cd vscode git clone https://github.com/nighthawkcoders/APCSA 2&gt;/dev/null cd .. fi #update APCSA repository echo &quot;Updating APCSA repository&quot; cd vscode/APCSA git pull 2&gt;/dev/null cd ../.. . Welcome to CSA Installer. Note that installations may require sudo permissions &amp; password to be entered Anaconda installed (Version 4.13.0) Python 3.9.12 installed Python 2.7.12 installed Java installed with Version 11 or Better (Version 11) Jupyter installed (Version 4.9.2) Bash Kernel Installed Java Kernel Installed Updating APCSA repository Updating 2e5c105..5e8fdb9 Fast-forward .../2022-08-22-TT110-anthony_and_sahil.ipynb | 23 +++++++++-- _pages/00_schedule.md | 42 ++++++++++++ _posts/2022-06-01-AR100-bitcoin_numbers.md | 34 +++++++++++++++++ _posts/2022-08-29-PT120-using_objects.md | 21 ++++++-- _posts/2022-08-29-TR120-team_innovation.md | 13 +++- _posts/2022-09-05-PT130-free_response.md | 38 +++++++++++++++++++ images/bitcoin.png | Bin 0 -&gt; 4303 bytes 7 files changed, 132 insertions(+), 39 deletions(-) create mode 100644 _posts/2022-06-01-AR100-bitcoin_numbers.md create mode 100644 _posts/2022-09-05-PT130-free_response.md create mode 100644 images/bitcoin.png .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/pbl/2022/08/26/bash.html",
            "relUrl": "/pbl/2022/08/26/bash.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Primitives Jupyter Notebook",
            "content": "Class with primitives &amp; wrapper classes . This class representing a Human that uses primitive and wrapper-class types . public class Human { private double heightIn; //a height can be a decimal private String name; //name is a sequence of words private int age; //is a whole nummber private boolean hasPets; //can either be true or false public Human (String name) { this.name = name; } public double getHeight () { return this.heightIn; } public void setHeight (double height) { this.heightIn = height; } public String getName () { return this.name; } public int getAge () { return this.age; } public void setAge (int age) { this.age = age; } public boolean getHasPets () { return this.hasPets; } public void setHasPets (boolean hasPets) { this.hasPets = hasPets; } public String getDetails () { return this.getName() + &quot; is &quot; + this.getAge() + &quot; years old and is &quot; + this.getHeight() + &quot; in tall and &quot; + (this.getHasPets() ? &quot;does&quot; : &quot;doesn&#39;t&quot;) + &quot; have pets.&quot;; } public static void main(String[] args) { Scanner sc = new Scanner(System.in); String name; double height; int age; boolean hasPets; //input name w/ error handling try { System.out.println(&quot;What is the name of the human?&quot;); name = sc.next(); } catch (InputMismatchException e) { System.out.println(&quot;Inputted name is not a string&quot;); return; } //input height w/ error handling try { System.out.println(&quot;What is the height of the human (in inches)?&quot;); height = sc.nextDouble(); } catch (InputMismatchException e) { System.out.println(&quot;Inputted height is not a double&quot;); return; } //input age w/ error handling try { System.out.println(&quot;What is the age of the human?&quot;); age = sc.nextInt(); } catch (InputMismatchException e) { System.out.println(&quot;Inputted age is not an integer&quot;); return; } //input hasPets w/ error handling try { System.out.println(&quot;Does the human have pets (true/false)?&quot;); hasPets = sc.nextBoolean(); } catch (InputMismatchException e) { System.out.println(&quot;Inputted value is not a boolean (true/false)&quot;); return; } //create human Human rohan = new Human(name); rohan.setHeight(height); rohan.setAge(age); rohan.setHasPets(hasPets); System.out.println(rohan.getDetails()); } } . Now we can test the code using the Human::main method . Human.main(null); . What is the name of the human? What is the height of the human (in inches)? What is the age of the human? Does the human have pets (true/false)? Rohan is 16 years old and is 67.25 in tall and doesn&#39;t have pets. . Casting w/ Arithmetic Operations . Here Examples are shown how casting can affect the results of arithmetic operations . public class ArithmeticOps { public static void main (String[] args) { System.out.println(&quot;Integer Division Calculator&quot;); Scanner sc = new Scanner(System.in); int a, b; try { System.out.println(&quot;Enter value for a&quot;); a = sc.nextInt(); System.out.println(&quot;Enter value for b&quot;); b = sc.nextInt(); } catch (InputMismatchException e) { System.out.println(&quot;Input was not an integers&quot;); return; } int integerDivision = a/b; //this will round down due to integer division double doubleDivision = ((double)a)/((double)b); //a and b are converted to doubles before division giving exact results System.out.println(&quot;a is &quot; + a + &quot; and b is &quot; + b); System.out.println(&quot;Integer Division Result &quot; + integerDivision); System.out.println(&quot;Double Division Result &quot; + doubleDivision); //note that the result for this may be slightly inaccurate due to base-2 to base-10 conversion } } . ArithmeticOps.main(null); . Integer Division Calculator Enter value for a Enter value for b a is 7 and b is 4 Integer Division Result 1 Double Division Result 1.75 . Compound Assignment Operators . Here I demo the use of compound operators . public class CompoundOps { public static void main (String[] args) { Scanner sc = new Scanner(System.in); try { System.out.println(&quot;Enter first number: &quot;); double a = sc.nextDouble(); System.out.println(&quot;The number is now &quot; + a); System.out.println(&quot;Increase number by: &quot;); a += sc.nextDouble(); System.out.println(&quot;The number is now &quot; + a); System.out.println(&quot;Decrease number by: &quot;); a -= sc.nextDouble(); System.out.println(&quot;The number is now &quot; + a); System.out.println(&quot;Multiply number by: &quot;); a *= sc.nextDouble(); System.out.println(&quot;The number is now &quot; + a); System.out.println(&quot;Divide number by: &quot;); a /= sc.nextDouble(); System.out.println(&quot;The number is now &quot; + a); } catch (InputMismatchException e) { System.out.println(&quot;Input was invalid&quot;); } } } . CompoundOps.main(null); . Enter first number: The number is now 10.0 Increase number by: The number is now 30.0 Decrease number by: The number is now -10.0 Multiply number by: The number is now -60.0 Divide number by: The number is now -6.666666666666667 . GPA Calculator . This GPA Calculator takes in your grades as in input and outputs different types of GPA. . //stats for a Grade (A,B,C NOT 9th,10th,11th) public class GradeStats { private int total_count; // -- int because whole number private int total_count_ap; // int because whole number private int uc_count; //UC count only includes sophmore/junior years -- int because whole number private int uc_count_ap; //UC count only includes sophmore/junior years -- int because whole number private double ap_gpa; //gpa for AP Classes (ie. 4.0, 3.0, etc.) -- double because it can have decimals private double normal_gpa; //gpa for Normal Classes (ie. 5.0, 4.0, etc.) -- double because it can have decimals private String grade; //A, B, C, etc. -- string because it is characters public GradeStats (String grade, double ap_gpa, double normal_gpa) { this.grade = grade; this.ap_gpa = ap_gpa; this.normal_gpa = normal_gpa; } public void setTotalCount (int total_count) { this.total_count = total_count; } public int getTotalCount () { return this.total_count; } public void setTotalCountAP (int total_count_ap) { this.total_count_ap = total_count_ap; } public int getTotalCountAP () { return this.total_count_ap; } public void setUCCount (int uc_count) { this.uc_count = uc_count; } public int getUCCount () { return this.uc_count; } public void setUCCountAP (int uc_count_ap) { this.uc_count_ap = uc_count_ap; } public int getUCCountAP () { return this.uc_count_ap; } public String getGrade () { return this.grade; } public double getAPGPA () { return this.ap_gpa; } public double getNormalGPA () { return this.normal_gpa; } } . public class GPACalculator { GradeStats[] gradeStats = { new GradeStats(&quot;A&quot;, 5.0, 4.0), new GradeStats(&quot;B&quot;, 4.0, 3.0), new GradeStats(&quot;C&quot;, 3.0, 2.0), new GradeStats(&quot;D&quot;, 2.0, 1.0), new GradeStats(&quot;F&quot;, 1.0, 0.0) }; // gets input from the scanner public GPACalculator (Scanner sc) throws InputMismatchException { for (int i = 0; i&lt;5; i++) { GradeStats curGradeStats = gradeStats[i]; System.out.print(&quot;How many total &quot; + curGradeStats.getGrade() + &quot;s do you have? &quot;); curGradeStats.setTotalCount(sc.nextInt()); System.out.println(curGradeStats.getTotalCount()); System.out.print(&quot;How many total (AP) &quot; + curGradeStats.getGrade() + &quot;s do you have? &quot;); curGradeStats.setTotalCountAP(sc.nextInt()); System.out.println(curGradeStats.getTotalCountAP()); System.out.print(&quot;How many sophmore/junior &quot; + curGradeStats.getGrade() + &quot;s do you have? &quot;); curGradeStats.setUCCount(sc.nextInt()); System.out.println(curGradeStats.getUCCount()); System.out.print(&quot;How many sophmore/junior (AP) &quot; + curGradeStats.getGrade() + &quot;s do you have? &quot;); curGradeStats.setUCCountAP(sc.nextInt()); System.out.println(curGradeStats.getUCCountAP()); } } public double getUnweighted () { double total = 0; double count = 0; for (int i = 0; i&lt;5; i++) { GradeStats curGradeStats = gradeStats[i]; count += curGradeStats.getTotalCount(); total += curGradeStats.getTotalCount() * curGradeStats.getNormalGPA(); } return count != 0.0 ? total/count : 0.0; } public double getWeighted () { double total = 0; double count = 0; for (int i = 0; i&lt;5; i++) { GradeStats curGradeStats = gradeStats[i]; count += curGradeStats.getTotalCount(); int normalCount = curGradeStats.getTotalCount() - curGradeStats.getTotalCountAP(); total += normalCount * curGradeStats.getNormalGPA() + curGradeStats.getTotalCountAP() * curGradeStats.getAPGPA(); } return count != 0.0 ? total/count : 0.0; } public double getUnweightedUC () { double total = 0; double count = 0; for (int i = 0; i&lt;5; i++) { GradeStats curGradeStats = gradeStats[i]; count += curGradeStats.getUCCount(); total += curGradeStats.getUCCount() * curGradeStats.getNormalGPA(); } return count != 0.0 ? total/count : 0.0; } public double getWeightedUC () { double total = 0; double count = 0; int ap_count = 0; //limited to 8 AP trimesters for (int i = 0; i&lt;5; i++) { GradeStats curGradeStats = gradeStats[i]; count += curGradeStats.getUCCount(); if (ap_count &gt; 8) { total += curGradeStats.getUCCount() * curGradeStats.getNormalGPA(); continue; } ap_count += curGradeStats.getUCCountAP(); if (ap_count &gt; 8) { int normalAPs = curGradeStats.getUCCountAP() - ap_count; int normalCount = curGradeStats.getUCCount() - curGradeStats.getUCCountAP() + normalAPs; total += normalCount * curGradeStats.getNormalGPA() + (curGradeStats.getUCCountAP() - normalAPs) * curGradeStats.getAPGPA(); } else { int normalCount = curGradeStats.getUCCount() - curGradeStats.getUCCountAP(); total += normalCount * curGradeStats.getNormalGPA() + curGradeStats.getUCCountAP() * curGradeStats.getAPGPA(); } } return count != 0.0 ? total/count : 0.0; } //runs GPA Calculator class public static void main (String[] args) { try { Scanner sc = new Scanner(System.in); GPACalculator gpaCalc = new GPACalculator(sc); System.out.println(&quot;Unweighted GPA: &quot; + gpaCalc.getUnweighted()); System.out.println(&quot;Weighted GPA: &quot; + gpaCalc.getWeighted()); System.out.println(&quot;Unweighted GPA (UC): &quot; + gpaCalc.getUnweightedUC()); System.out.println(&quot;Weighted GPA (UC): &quot; + gpaCalc.getWeightedUC()); } catch (InputMismatchException e) { System.out.println(&quot;Bad Input (all input should be integers)!&quot;); } } } . GPACalculator.main(null); . How many total As do you have? 29 How many total (AP) As do you have? 8 How many sophmore/junior As do you have? 14 How many sophmore/junior (AP) As do you have? 6 How many total Bs do you have? 0 How many total (AP) Bs do you have? 0 How many sophmore/junior Bs do you have? 0 How many sophmore/junior (AP) Bs do you have? 0 How many total Cs do you have? 0 How many total (AP) Cs do you have? 0 How many sophmore/junior Cs do you have? 0 How many sophmore/junior (AP) Cs do you have? 0 How many total Ds do you have? 0 How many total (AP) Ds do you have? 0 How many sophmore/junior Ds do you have? 0 How many sophmore/junior (AP) Ds do you have? 0 How many total Fs do you have? 0 How many total (AP) Fs do you have? 0 How many sophmore/junior Fs do you have? 0 How many sophmore/junior (AP) Fs do you have? 0 Unweighted GPA: 4.0 Weighted GPA: 4.275862068965517 Unweighted GPA (UC): 4.0 Weighted GPA (UC): 4.428571428571429 .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/pbl/2022/08/22/primitives.html",
            "relUrl": "/cb/pbl/2022/08/22/primitives.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Python Jupyter Notebook",
            "content": "print(&#39;hello&#39;) . hello .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/setup/2022/08/19/python.html",
            "relUrl": "/setup/2022/08/19/python.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "A cool post",
            "content": "This is a very great post . Why is this post great? . This post has a java code sample 😲 . public class Test { public static void main (String[] args) { System.out.println(&quot;sheeeeeeesh&quot;); } } .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/setup/2022/08/19/markdown-post.html",
            "relUrl": "/setup/2022/08/19/markdown-post.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Java Jupyter Notebook",
            "content": "//imports import java.time.*; . //Class can print a value with current date public class Printer { private String value; //takes in value to print public Printer (String value) { this.value = value; } //prints the value &amp; date info from java.time public void print() { //get current date in YYYY-MM-DD format String currentDate = LocalDate.now().toString(); //print value &amp; currentdate System.out.println(&quot;[&quot; + currentDate + &quot;]: &quot; + value); } //tests the class by printing hello and hello world public static void main (String[] args) { //this printer prints hello Printer helloPrinter = new Printer(&quot;hello&quot;); helloPrinter.print(); //this printer prints hello world Printer helloWorldPrinter = new Printer(&quot;hello world&quot;); helloWorldPrinter.print(); } } . // use main method from Printer Printer.main(null); /* expected output (ran on 8/20/2022): * [2022-08-20]: hello * [2022-08-20]: hello world */ . [2022-08-20]: hello [2022-08-20]: hello world .",
            "url": "https://rjawesome.github.io/apcsa_fastpages/cb/2022/08/19/java.html",
            "relUrl": "/cb/2022/08/19/java.html",
            "date": " • Aug 19, 2022"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "Vocab",
          "content": "Here I will keep some important CS Vocab . Primitives: A type of data in Java which is basic and does not have any properties/methods (ie int, boolean, double) | Wrapper Classes: Classes that allow primitives to be used in places where only classes are allowed such as generics (ie. Integer, Boolean, Double, String) | Static vs Dynamic Methods: Static methods are simply called on the class while dynamic methods are called on an INSTANCE of the class (an object) | Constructors: These are special methods that are called when an object of a class is created. | . Collegeboard Posts . CollegeBoard FRQ . cb . This shows an FRQ for Collegeboard focused on iteration and arrays . Sep 16, 2022 . | | | | If Statements/Boolean Lesson . cb . This is an interactive lesson with jupyter notebooks teaching if statements and boolean expressions . Sep 7, 2022 . | Week 2 AP CSA . pbl . cb . A description of what I did Week 1 . Sep 5, 2022 . | Cricket Scores GUI . pbl . cb . This app provides a GUI for checking cricket scores using objects . Sep 1, 2022 . | | | Physics Graph . pbl . cb . This code provides a visualization for my physics data . Aug 29, 2022 . | Week 1 AP CSA . pbl . cb . A description of what I did Week 1 . Aug 28, 2022 . | | | | Primitives Jupyter Notebook . cb . pbl . about primitives . Aug 22, 2022 . | | | Java Jupyter Notebook . cb . Prints hello using a printer class . Aug 19, 2022 . | .",
          "url": "https://rjawesome.github.io/apcsa_fastpages/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "Hi, I’m a high school student who loves Programming, Robotics, and CyberSecurity. Check out my app “Hangman Ad Free” on the Play Store. .",
          "url": "https://rjawesome.github.io/apcsa_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Todo",
          "content": "Todo List . .",
          "url": "https://rjawesome.github.io/apcsa_fastpages/todo/",
          "relUrl": "/todo/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rjawesome.github.io/apcsa_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}